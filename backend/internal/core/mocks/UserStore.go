// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/kotopesp/sos-kotopes/internal/controller/http/model/user"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

func (_m *UserStore) UpdateUser(ctx context.Context, id int, update core.UpdateUser) (updatedUser core.User, err error) {
	//TODO implement me
	panic("implement me")
}

func (_m *UserStore) GetUser(ctx context.Context, id int) (user core.User, err error) {
	//TODO implement me
	panic("implement me")
}

func (_m *UserStore) GetUserPosts(ctx context.Context, id int) (posts []core.Post, err error) {
	//TODO implement me
	panic("implement me")
}

// AddExternalUser provides a mock function with given fields: ctx, user, externalUserID, authProvider
func (_m *UserStore) AddExternalUser(ctx context.Context, user core.User, externalUserID int, authProvider string) (int, error) {
	ret := _m.Called(ctx, user, externalUserID, authProvider)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User, int, string) (int, error)); ok {
		return rf(ctx, user, externalUserID, authProvider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User, int, string) int); ok {
		r0 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User, int, string) error); ok {
		r1 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *UserStore) AddUser(ctx context.Context, user core.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *UserStore) GetUserByExternalID(ctx context.Context, externalID int) (core.ExternalUser, error) {
	ret := _m.Called(ctx, externalID)

	var r0 core.ExternalUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.ExternalUser, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.ExternalUser); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Get(0).(core.ExternalUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserStore) GetUserByID(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserStore) GetUserByUsername(ctx context.Context, username string) (core.User, error) {
	ret := _m.Called(ctx, username)

	var r0 core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (core.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) core.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStore(t mockConstructorTestingTNewUserStore) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
