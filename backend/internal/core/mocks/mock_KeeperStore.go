// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockKeeperStore is an autogenerated mock type for the KeeperStore type
type MockKeeperStore struct {
	mock.Mock
}

type MockKeeperStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperStore) EXPECT() *MockKeeperStore_Expecter {
	return &MockKeeperStore_Expecter{mock: &_m.Mock}
}

// CreateKeeper provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperStore) CreateKeeper(ctx context.Context, keeper core.Keeper) error {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeeper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Keeper) error); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperStore_CreateKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeeper'
type MockKeeperStore_CreateKeeper_Call struct {
	*mock.Call
}

// CreateKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.Keeper
func (_e *MockKeeperStore_Expecter) CreateKeeper(ctx interface{}, keeper interface{}) *MockKeeperStore_CreateKeeper_Call {
	return &MockKeeperStore_CreateKeeper_Call{Call: _e.mock.On("CreateKeeper", ctx, keeper)}
}

func (_c *MockKeeperStore_CreateKeeper_Call) Run(run func(ctx context.Context, keeper core.Keeper)) *MockKeeperStore_CreateKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Keeper))
	})
	return _c
}

func (_c *MockKeeperStore_CreateKeeper_Call) Return(_a0 error) *MockKeeperStore_CreateKeeper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperStore_CreateKeeper_Call) RunAndReturn(run func(context.Context, core.Keeper) error) *MockKeeperStore_CreateKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeeper provides a mock function with given fields: ctx, id
func (_m *MockKeeperStore) DeleteKeeper(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeeper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperStore_DeleteKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeeper'
type MockKeeperStore_DeleteKeeper_Call struct {
	*mock.Call
}

// DeleteKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperStore_Expecter) DeleteKeeper(ctx interface{}, id interface{}) *MockKeeperStore_DeleteKeeper_Call {
	return &MockKeeperStore_DeleteKeeper_Call{Call: _e.mock.On("DeleteKeeper", ctx, id)}
}

func (_c *MockKeeperStore_DeleteKeeper_Call) Run(run func(ctx context.Context, id int)) *MockKeeperStore_DeleteKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperStore_DeleteKeeper_Call) Return(_a0 error) *MockKeeperStore_DeleteKeeper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperStore_DeleteKeeper_Call) RunAndReturn(run func(context.Context, int) error) *MockKeeperStore_DeleteKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllKeepers provides a mock function with given fields: ctx, params
func (_m *MockKeeperStore) GetAllKeepers(ctx context.Context, params core.GetAllKeepersParams) ([]core.Keeper, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllKeepers")
	}

	var r0 []core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) ([]core.Keeper, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) []core.Keeper); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Keeper)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllKeepersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_GetAllKeepers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllKeepers'
type MockKeeperStore_GetAllKeepers_Call struct {
	*mock.Call
}

// GetAllKeepers is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllKeepersParams
func (_e *MockKeeperStore_Expecter) GetAllKeepers(ctx interface{}, params interface{}) *MockKeeperStore_GetAllKeepers_Call {
	return &MockKeeperStore_GetAllKeepers_Call{Call: _e.mock.On("GetAllKeepers", ctx, params)}
}

func (_c *MockKeeperStore_GetAllKeepers_Call) Run(run func(ctx context.Context, params core.GetAllKeepersParams)) *MockKeeperStore_GetAllKeepers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllKeepersParams))
	})
	return _c
}

func (_c *MockKeeperStore_GetAllKeepers_Call) Return(data []core.Keeper, err error) *MockKeeperStore_GetAllKeepers_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperStore_GetAllKeepers_Call) RunAndReturn(run func(context.Context, core.GetAllKeepersParams) ([]core.Keeper, error)) *MockKeeperStore_GetAllKeepers_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeeperByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperStore) GetKeeperByID(ctx context.Context, id int) (core.Keeper, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetKeeperByID")
	}

	var r0 core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Keeper, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Keeper); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Keeper)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_GetKeeperByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeeperByID'
type MockKeeperStore_GetKeeperByID_Call struct {
	*mock.Call
}

// GetKeeperByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperStore_Expecter) GetKeeperByID(ctx interface{}, id interface{}) *MockKeeperStore_GetKeeperByID_Call {
	return &MockKeeperStore_GetKeeperByID_Call{Call: _e.mock.On("GetKeeperByID", ctx, id)}
}

func (_c *MockKeeperStore_GetKeeperByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperStore_GetKeeperByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperStore_GetKeeperByID_Call) Return(_a0 core.Keeper, _a1 error) *MockKeeperStore_GetKeeperByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperStore_GetKeeperByID_Call) RunAndReturn(run func(context.Context, int) (core.Keeper, error)) *MockKeeperStore_GetKeeperByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeeper provides a mock function with given fields: ctx, id, keeper
func (_m *MockKeeperStore) UpdateKeeper(ctx context.Context, id int, keeper core.UpdateKeeper) (core.Keeper, error) {
	ret := _m.Called(ctx, id, keeper)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeeper")
	}

	var r0 core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateKeeper) (core.Keeper, error)); ok {
		return rf(ctx, id, keeper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateKeeper) core.Keeper); ok {
		r0 = rf(ctx, id, keeper)
	} else {
		r0 = ret.Get(0).(core.Keeper)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateKeeper) error); ok {
		r1 = rf(ctx, id, keeper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_UpdateKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeeper'
type MockKeeperStore_UpdateKeeper_Call struct {
	*mock.Call
}

// UpdateKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - keeper core.UpdateKeeper
func (_e *MockKeeperStore_Expecter) UpdateKeeper(ctx interface{}, id interface{}, keeper interface{}) *MockKeeperStore_UpdateKeeper_Call {
	return &MockKeeperStore_UpdateKeeper_Call{Call: _e.mock.On("UpdateKeeper", ctx, id, keeper)}
}

func (_c *MockKeeperStore_UpdateKeeper_Call) Run(run func(ctx context.Context, id int, keeper core.UpdateKeeper)) *MockKeeperStore_UpdateKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateKeeper))
	})
	return _c
}

func (_c *MockKeeperStore_UpdateKeeper_Call) Return(_a0 core.Keeper, _a1 error) *MockKeeperStore_UpdateKeeper_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperStore_UpdateKeeper_Call) RunAndReturn(run func(context.Context, int, core.UpdateKeeper) (core.Keeper, error)) *MockKeeperStore_UpdateKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeeperStore creates a new instance of MockKeeperStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeeperStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeeperStore {
	mock := &MockKeeperStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
