// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockKeeperStore is an autogenerated mock type for the KeeperStore type
type MockKeeperStore struct {
	mock.Mock
}

type MockKeeperStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperStore) EXPECT() *MockKeeperStore_Expecter {
	return &MockKeeperStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperStore) Create(ctx context.Context, keeper core.Keepers) error {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Keepers) error); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockKeeperStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.Keepers
func (_e *MockKeeperStore_Expecter) Create(ctx interface{}, keeper interface{}) *MockKeeperStore_Create_Call {
	return &MockKeeperStore_Create_Call{Call: _e.mock.On("Create", ctx, keeper)}
}

func (_c *MockKeeperStore_Create_Call) Run(run func(ctx context.Context, keeper core.Keepers)) *MockKeeperStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Keepers))
	})
	return _c
}

func (_c *MockKeeperStore_Create_Call) Return(_a0 error) *MockKeeperStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperStore_Create_Call) RunAndReturn(run func(context.Context, core.Keepers) error) *MockKeeperStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, params
func (_m *MockKeeperStore) GetAll(ctx context.Context, params core.GetAllKeepersParams) ([]core.Keepers, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []core.Keepers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) ([]core.Keepers, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) []core.Keepers); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Keepers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllKeepersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockKeeperStore_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllKeepersParams
func (_e *MockKeeperStore_Expecter) GetAll(ctx interface{}, params interface{}) *MockKeeperStore_GetAll_Call {
	return &MockKeeperStore_GetAll_Call{Call: _e.mock.On("GetAll", ctx, params)}
}

func (_c *MockKeeperStore_GetAll_Call) Run(run func(ctx context.Context, params core.GetAllKeepersParams)) *MockKeeperStore_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllKeepersParams))
	})
	return _c
}

func (_c *MockKeeperStore_GetAll_Call) Return(_a0 []core.Keepers, _a1 error) *MockKeeperStore_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperStore_GetAll_Call) RunAndReturn(run func(context.Context, core.GetAllKeepersParams) ([]core.Keepers, error)) *MockKeeperStore_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperStore) GetByID(ctx context.Context, id int) (core.Keepers, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 core.Keepers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Keepers, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Keepers); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Keepers)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockKeeperStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockKeeperStore_GetByID_Call {
	return &MockKeeperStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockKeeperStore_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperStore_GetByID_Call) Return(_a0 core.Keepers, _a1 error) *MockKeeperStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperStore_GetByID_Call) RunAndReturn(run func(context.Context, int) (core.Keepers, error)) *MockKeeperStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperStore) SoftDeleteByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperStore_SoftDeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteByID'
type MockKeeperStore_SoftDeleteByID_Call struct {
	*mock.Call
}

// SoftDeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperStore_Expecter) SoftDeleteByID(ctx interface{}, id interface{}) *MockKeeperStore_SoftDeleteByID_Call {
	return &MockKeeperStore_SoftDeleteByID_Call{Call: _e.mock.On("SoftDeleteByID", ctx, id)}
}

func (_c *MockKeeperStore_SoftDeleteByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperStore_SoftDeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperStore_SoftDeleteByID_Call) Return(_a0 error) *MockKeeperStore_SoftDeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperStore_SoftDeleteByID_Call) RunAndReturn(run func(context.Context, int) error) *MockKeeperStore_SoftDeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperStore) UpdateByID(ctx context.Context, keeper core.UpdateKeepers) (core.Keepers, error) {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 core.Keepers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeepers) (core.Keepers, error)); ok {
		return rf(ctx, keeper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeepers) core.Keepers); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Get(0).(core.Keepers)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateKeepers) error); ok {
		r1 = rf(ctx, keeper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperStore_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockKeeperStore_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.UpdateKeepers
func (_e *MockKeeperStore_Expecter) UpdateByID(ctx interface{}, keeper interface{}) *MockKeeperStore_UpdateByID_Call {
	return &MockKeeperStore_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, keeper)}
}

func (_c *MockKeeperStore_UpdateByID_Call) Run(run func(ctx context.Context, keeper core.UpdateKeepers)) *MockKeeperStore_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateKeepers))
	})
	return _c
}

func (_c *MockKeeperStore_UpdateByID_Call) Return(_a0 core.Keepers, _a1 error) *MockKeeperStore_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperStore_UpdateByID_Call) RunAndReturn(run func(context.Context, core.UpdateKeepers) (core.Keepers, error)) *MockKeeperStore_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeeperStore creates a new instance of MockKeeperStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeeperStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeeperStore {
	mock := &MockKeeperStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
