// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// PostStore is an autogenerated mock type for the PostStore type
type PostStore struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *PostStore) CreatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) (core.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *PostStore) DeletePost(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPosts provides a mock function with given fields: ctx, params
func (_m *PostStore) GetAllPosts(ctx context.Context, params core.GetAllPostsParams) ([]core.Post, int, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []core.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) ([]core.Post, int, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) []core.Post); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *PostStore) GetPostByID(ctx context.Context, id int) (core.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPosts provides a mock function with given fields: ctx, id
func (_m *PostStore) GetUserPosts(ctx context.Context, id int) ([]core.Post, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPosts")
	}

	var r0 []core.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.Post, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePost provides a mock function with given fields: ctx, post
func (_m *PostStore) UpdatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) (core.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostStore creates a new instance of PostStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostStore {
	mock := &PostStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
