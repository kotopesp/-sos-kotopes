// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockKeeperReviewStore is an autogenerated mock type for the KeeperReviewStore type
type MockKeeperReviewStore struct {
	mock.Mock
}

type MockKeeperReviewStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperReviewStore) EXPECT() *MockKeeperReviewStore_Expecter {
	return &MockKeeperReviewStore_Expecter{mock: &_m.Mock}
}

// CreateReview provides a mock function with given fields: ctx, review
func (_m *MockKeeperReviewStore) CreateReview(ctx context.Context, review core.KeeperReview) error {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.KeeperReview) error); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperReviewStore_CreateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReview'
type MockKeeperReviewStore_CreateReview_Call struct {
	*mock.Call
}

// CreateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - review core.KeeperReview
func (_e *MockKeeperReviewStore_Expecter) CreateReview(ctx interface{}, review interface{}) *MockKeeperReviewStore_CreateReview_Call {
	return &MockKeeperReviewStore_CreateReview_Call{Call: _e.mock.On("CreateReview", ctx, review)}
}

func (_c *MockKeeperReviewStore_CreateReview_Call) Run(run func(ctx context.Context, review core.KeeperReview)) *MockKeeperReviewStore_CreateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.KeeperReview))
	})
	return _c
}

func (_c *MockKeeperReviewStore_CreateReview_Call) Return(_a0 error) *MockKeeperReviewStore_CreateReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperReviewStore_CreateReview_Call) RunAndReturn(run func(context.Context, core.KeeperReview) error) *MockKeeperReviewStore_CreateReview_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReview provides a mock function with given fields: ctx, id
func (_m *MockKeeperReviewStore) DeleteReview(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperReviewStore_DeleteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReview'
type MockKeeperReviewStore_DeleteReview_Call struct {
	*mock.Call
}

// DeleteReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperReviewStore_Expecter) DeleteReview(ctx interface{}, id interface{}) *MockKeeperReviewStore_DeleteReview_Call {
	return &MockKeeperReviewStore_DeleteReview_Call{Call: _e.mock.On("DeleteReview", ctx, id)}
}

func (_c *MockKeeperReviewStore_DeleteReview_Call) Run(run func(ctx context.Context, id int)) *MockKeeperReviewStore_DeleteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperReviewStore_DeleteReview_Call) Return(_a0 error) *MockKeeperReviewStore_DeleteReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperReviewStore_DeleteReview_Call) RunAndReturn(run func(context.Context, int) error) *MockKeeperReviewStore_DeleteReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllReviews provides a mock function with given fields: ctx, keeperID, params
func (_m *MockKeeperReviewStore) GetAllReviews(ctx context.Context, keeperID int, params core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error) {
	ret := _m.Called(ctx, keeperID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 []core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error)); ok {
		return rf(ctx, keeperID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllKeeperReviewsParams) []core.KeeperReview); ok {
		r0 = rf(ctx, keeperID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.KeeperReview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllKeeperReviewsParams) error); ok {
		r1 = rf(ctx, keeperID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperReviewStore_GetAllReviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllReviews'
type MockKeeperReviewStore_GetAllReviews_Call struct {
	*mock.Call
}

// GetAllReviews is a helper method to define mock.On call
//   - ctx context.Context
//   - keeperID int
//   - params core.GetAllKeeperReviewsParams
func (_e *MockKeeperReviewStore_Expecter) GetAllReviews(ctx interface{}, keeperID interface{}, params interface{}) *MockKeeperReviewStore_GetAllReviews_Call {
	return &MockKeeperReviewStore_GetAllReviews_Call{Call: _e.mock.On("GetAllReviews", ctx, keeperID, params)}
}

func (_c *MockKeeperReviewStore_GetAllReviews_Call) Run(run func(ctx context.Context, keeperID int, params core.GetAllKeeperReviewsParams)) *MockKeeperReviewStore_GetAllReviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllKeeperReviewsParams))
	})
	return _c
}

func (_c *MockKeeperReviewStore_GetAllReviews_Call) Return(data []core.KeeperReview, err error) *MockKeeperReviewStore_GetAllReviews_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperReviewStore_GetAllReviews_Call) RunAndReturn(run func(context.Context, int, core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error)) *MockKeeperReviewStore_GetAllReviews_Call {
	_c.Call.Return(run)
	return _c
}

// GetReviewByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperReviewStore) GetReviewByID(ctx context.Context, id int) (core.KeeperReview, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewByID")
	}

	var r0 core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.KeeperReview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.KeeperReview); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.KeeperReview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperReviewStore_GetReviewByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReviewByID'
type MockKeeperReviewStore_GetReviewByID_Call struct {
	*mock.Call
}

// GetReviewByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperReviewStore_Expecter) GetReviewByID(ctx interface{}, id interface{}) *MockKeeperReviewStore_GetReviewByID_Call {
	return &MockKeeperReviewStore_GetReviewByID_Call{Call: _e.mock.On("GetReviewByID", ctx, id)}
}

func (_c *MockKeeperReviewStore_GetReviewByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperReviewStore_GetReviewByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperReviewStore_GetReviewByID_Call) Return(_a0 core.KeeperReview, _a1 error) *MockKeeperReviewStore_GetReviewByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperReviewStore_GetReviewByID_Call) RunAndReturn(run func(context.Context, int) (core.KeeperReview, error)) *MockKeeperReviewStore_GetReviewByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReview provides a mock function with given fields: ctx, id, review
func (_m *MockKeeperReviewStore) UpdateReview(ctx context.Context, id int, review core.UpdateKeeperReview) (core.KeeperReview, error) {
	ret := _m.Called(ctx, id, review)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateKeeperReview) (core.KeeperReview, error)); ok {
		return rf(ctx, id, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateKeeperReview) core.KeeperReview); ok {
		r0 = rf(ctx, id, review)
	} else {
		r0 = ret.Get(0).(core.KeeperReview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateKeeperReview) error); ok {
		r1 = rf(ctx, id, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperReviewStore_UpdateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReview'
type MockKeeperReviewStore_UpdateReview_Call struct {
	*mock.Call
}

// UpdateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - review core.UpdateKeeperReview
func (_e *MockKeeperReviewStore_Expecter) UpdateReview(ctx interface{}, id interface{}, review interface{}) *MockKeeperReviewStore_UpdateReview_Call {
	return &MockKeeperReviewStore_UpdateReview_Call{Call: _e.mock.On("UpdateReview", ctx, id, review)}
}

func (_c *MockKeeperReviewStore_UpdateReview_Call) Run(run func(ctx context.Context, id int, review core.UpdateKeeperReview)) *MockKeeperReviewStore_UpdateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateKeeperReview))
	})
	return _c
}

func (_c *MockKeeperReviewStore_UpdateReview_Call) Return(data core.KeeperReview, err error) *MockKeeperReviewStore_UpdateReview_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperReviewStore_UpdateReview_Call) RunAndReturn(run func(context.Context, int, core.UpdateKeeperReview) (core.KeeperReview, error)) *MockKeeperReviewStore_UpdateReview_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeeperReviewStore creates a new instance of MockKeeperReviewStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeeperReviewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeeperReviewStore {
	mock := &MockKeeperReviewStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
