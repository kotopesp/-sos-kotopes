// Code generated by mockery v2.46.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockChatMemberService is an autogenerated mock type for the ChatMemberService type
type MockChatMemberService struct {
	mock.Mock
}

type MockChatMemberService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatMemberService) EXPECT() *MockChatMemberService_Expecter {
	return &MockChatMemberService_Expecter{mock: &_m.Mock}
}

// AddMemberToChat provides a mock function with given fields: ctx, data, userID
func (_m *MockChatMemberService) AddMemberToChat(ctx context.Context, data core.ChatMember, userID int) (core.ChatMember, error) {
	ret := _m.Called(ctx, data, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddMemberToChat")
	}

	var r0 core.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.ChatMember, int) (core.ChatMember, error)); ok {
		return rf(ctx, data, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.ChatMember, int) core.ChatMember); ok {
		r0 = rf(ctx, data, userID)
	} else {
		r0 = ret.Get(0).(core.ChatMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.ChatMember, int) error); ok {
		r1 = rf(ctx, data, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatMemberService_AddMemberToChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMemberToChat'
type MockChatMemberService_AddMemberToChat_Call struct {
	*mock.Call
}

// AddMemberToChat is a helper method to define mock.On call
//   - ctx context.Context
//   - data core.ChatMember
//   - userID int
func (_e *MockChatMemberService_Expecter) AddMemberToChat(ctx interface{}, data interface{}, userID interface{}) *MockChatMemberService_AddMemberToChat_Call {
	return &MockChatMemberService_AddMemberToChat_Call{Call: _e.mock.On("AddMemberToChat", ctx, data, userID)}
}

func (_c *MockChatMemberService_AddMemberToChat_Call) Run(run func(ctx context.Context, data core.ChatMember, userID int)) *MockChatMemberService_AddMemberToChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.ChatMember), args[2].(int))
	})
	return _c
}

func (_c *MockChatMemberService_AddMemberToChat_Call) Return(member core.ChatMember, err error) *MockChatMemberService_AddMemberToChat_Call {
	_c.Call.Return(member, err)
	return _c
}

func (_c *MockChatMemberService_AddMemberToChat_Call) RunAndReturn(run func(context.Context, core.ChatMember, int) (core.ChatMember, error)) *MockChatMemberService_AddMemberToChat_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMemberFromChat provides a mock function with given fields: ctx, chatID, userID, currentUserID
func (_m *MockChatMemberService) DeleteMemberFromChat(ctx context.Context, chatID int, userID int, currentUserID int) error {
	ret := _m.Called(ctx, chatID, userID, currentUserID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMemberFromChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, chatID, userID, currentUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatMemberService_DeleteMemberFromChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMemberFromChat'
type MockChatMemberService_DeleteMemberFromChat_Call struct {
	*mock.Call
}

// DeleteMemberFromChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int
//   - userID int
//   - currentUserID int
func (_e *MockChatMemberService_Expecter) DeleteMemberFromChat(ctx interface{}, chatID interface{}, userID interface{}, currentUserID interface{}) *MockChatMemberService_DeleteMemberFromChat_Call {
	return &MockChatMemberService_DeleteMemberFromChat_Call{Call: _e.mock.On("DeleteMemberFromChat", ctx, chatID, userID, currentUserID)}
}

func (_c *MockChatMemberService_DeleteMemberFromChat_Call) Run(run func(ctx context.Context, chatID int, userID int, currentUserID int)) *MockChatMemberService_DeleteMemberFromChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockChatMemberService_DeleteMemberFromChat_Call) Return(err error) *MockChatMemberService_DeleteMemberFromChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChatMemberService_DeleteMemberFromChat_Call) RunAndReturn(run func(context.Context, int, int, int) error) *MockChatMemberService_DeleteMemberFromChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMembers provides a mock function with given fields: ctx, chatID, userID
func (_m *MockChatMemberService) GetAllMembers(ctx context.Context, chatID int, userID int) ([]core.ChatMember, int, error) {
	ret := _m.Called(ctx, chatID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMembers")
	}

	var r0 []core.ChatMember
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]core.ChatMember, int, error)); ok {
		return rf(ctx, chatID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []core.ChatMember); ok {
		r0 = rf(ctx, chatID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, chatID, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, chatID, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockChatMemberService_GetAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembers'
type MockChatMemberService_GetAllMembers_Call struct {
	*mock.Call
}

// GetAllMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int
//   - userID int
func (_e *MockChatMemberService_Expecter) GetAllMembers(ctx interface{}, chatID interface{}, userID interface{}) *MockChatMemberService_GetAllMembers_Call {
	return &MockChatMemberService_GetAllMembers_Call{Call: _e.mock.On("GetAllMembers", ctx, chatID, userID)}
}

func (_c *MockChatMemberService_GetAllMembers_Call) Run(run func(ctx context.Context, chatID int, userID int)) *MockChatMemberService_GetAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockChatMemberService_GetAllMembers_Call) Return(members []core.ChatMember, total int, err error) *MockChatMemberService_GetAllMembers_Call {
	_c.Call.Return(members, total, err)
	return _c
}

func (_c *MockChatMemberService_GetAllMembers_Call) RunAndReturn(run func(context.Context, int, int) ([]core.ChatMember, int, error)) *MockChatMemberService_GetAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMemberInfo provides a mock function with given fields: ctx, chatID, userID, currentUserID
func (_m *MockChatMemberService) UpdateMemberInfo(ctx context.Context, chatID int, userID int, currentUserID int) (core.ChatMember, error) {
	ret := _m.Called(ctx, chatID, userID, currentUserID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberInfo")
	}

	var r0 core.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (core.ChatMember, error)); ok {
		return rf(ctx, chatID, userID, currentUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) core.ChatMember); ok {
		r0 = rf(ctx, chatID, userID, currentUserID)
	} else {
		r0 = ret.Get(0).(core.ChatMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, chatID, userID, currentUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatMemberService_UpdateMemberInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMemberInfo'
type MockChatMemberService_UpdateMemberInfo_Call struct {
	*mock.Call
}

// UpdateMemberInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int
//   - userID int
//   - currentUserID int
func (_e *MockChatMemberService_Expecter) UpdateMemberInfo(ctx interface{}, chatID interface{}, userID interface{}, currentUserID interface{}) *MockChatMemberService_UpdateMemberInfo_Call {
	return &MockChatMemberService_UpdateMemberInfo_Call{Call: _e.mock.On("UpdateMemberInfo", ctx, chatID, userID, currentUserID)}
}

func (_c *MockChatMemberService_UpdateMemberInfo_Call) Run(run func(ctx context.Context, chatID int, userID int, currentUserID int)) *MockChatMemberService_UpdateMemberInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockChatMemberService_UpdateMemberInfo_Call) Return(member core.ChatMember, err error) *MockChatMemberService_UpdateMemberInfo_Call {
	_c.Call.Return(member, err)
	return _c
}

func (_c *MockChatMemberService_UpdateMemberInfo_Call) RunAndReturn(run func(context.Context, int, int, int) (core.ChatMember, error)) *MockChatMemberService_UpdateMemberInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatMemberService creates a new instance of MockChatMemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatMemberService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatMemberService {
	mock := &MockChatMemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
