// Code generated by mockery v2.49.0. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockPostFavouriteStore is an autogenerated mock type for the PostFavouriteStore type
type MockPostFavouriteStore struct {
	mock.Mock
}

type MockPostFavouriteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostFavouriteStore) EXPECT() *MockPostFavouriteStore_Expecter {
	return &MockPostFavouriteStore_Expecter{mock: &_m.Mock}
}

// AddToFavourites provides a mock function with given fields: ctx, postFavourite
func (_m *MockPostFavouriteStore) AddToFavourites(ctx context.Context, postFavourite core.PostFavourite) (core.Post, error) {
	ret := _m.Called(ctx, postFavourite)

	if len(ret) == 0 {
		panic("no return value specified for AddToFavourites")
	}

	var r0 core.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) (core.Post, error)); ok {
		return rf(ctx, postFavourite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) core.Post); ok {
		r0 = rf(ctx, postFavourite)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.PostFavourite) error); ok {
		r1 = rf(ctx, postFavourite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostFavouriteStore_AddToFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToFavourites'
type MockPostFavouriteStore_AddToFavourites_Call struct {
	*mock.Call
}

// AddToFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - postFavourite core.PostFavourite
func (_e *MockPostFavouriteStore_Expecter) AddToFavourites(ctx interface{}, postFavourite interface{}) *MockPostFavouriteStore_AddToFavourites_Call {
	return &MockPostFavouriteStore_AddToFavourites_Call{Call: _e.mock.On("AddToFavourites", ctx, postFavourite)}
}

func (_c *MockPostFavouriteStore_AddToFavourites_Call) Run(run func(ctx context.Context, postFavourite core.PostFavourite)) *MockPostFavouriteStore_AddToFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PostFavourite))
	})
	return _c
}

func (_c *MockPostFavouriteStore_AddToFavourites_Call) Return(_a0 core.Post, _a1 error) *MockPostFavouriteStore_AddToFavourites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostFavouriteStore_AddToFavourites_Call) RunAndReturn(run func(context.Context, core.PostFavourite) (core.Post, error)) *MockPostFavouriteStore_AddToFavourites_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFromFavourites provides a mock function with given fields: ctx, postID, userID
func (_m *MockPostFavouriteStore) DeleteFromFavourites(ctx context.Context, postID int, userID int) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFromFavourites")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostFavouriteStore_DeleteFromFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFromFavourites'
type MockPostFavouriteStore_DeleteFromFavourites_Call struct {
	*mock.Call
}

// DeleteFromFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *MockPostFavouriteStore_Expecter) DeleteFromFavourites(ctx interface{}, postID interface{}, userID interface{}) *MockPostFavouriteStore_DeleteFromFavourites_Call {
	return &MockPostFavouriteStore_DeleteFromFavourites_Call{Call: _e.mock.On("DeleteFromFavourites", ctx, postID, userID)}
}

func (_c *MockPostFavouriteStore_DeleteFromFavourites_Call) Run(run func(ctx context.Context, postID int, userID int)) *MockPostFavouriteStore_DeleteFromFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPostFavouriteStore_DeleteFromFavourites_Call) Return(_a0 error) *MockPostFavouriteStore_DeleteFromFavourites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostFavouriteStore_DeleteFromFavourites_Call) RunAndReturn(run func(context.Context, int, int) error) *MockPostFavouriteStore_DeleteFromFavourites_Call {
	_c.Call.Return(run)
	return _c
}

// GetFavouritePosts provides a mock function with given fields: ctx, userID, params
func (_m *MockPostFavouriteStore) GetFavouritePosts(ctx context.Context, userID int, params core.GetAllPostsParams) ([]core.Post, int, error) {
	ret := _m.Called(ctx, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetFavouritePosts")
	}

	var r0 []core.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) ([]core.Post, int, error)); ok {
		return rf(ctx, userID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) []core.Post); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, userID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostFavouriteStore_GetFavouritePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFavouritePosts'
type MockPostFavouriteStore_GetFavouritePosts_Call struct {
	*mock.Call
}

// GetFavouritePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetAllPostsParams
func (_e *MockPostFavouriteStore_Expecter) GetFavouritePosts(ctx interface{}, userID interface{}, params interface{}) *MockPostFavouriteStore_GetFavouritePosts_Call {
	return &MockPostFavouriteStore_GetFavouritePosts_Call{Call: _e.mock.On("GetFavouritePosts", ctx, userID, params)}
}

func (_c *MockPostFavouriteStore_GetFavouritePosts_Call) Run(run func(ctx context.Context, userID int, params core.GetAllPostsParams)) *MockPostFavouriteStore_GetFavouritePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *MockPostFavouriteStore_GetFavouritePosts_Call) Return(_a0 []core.Post, _a1 int, _a2 error) *MockPostFavouriteStore_GetFavouritePosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPostFavouriteStore_GetFavouritePosts_Call) RunAndReturn(run func(context.Context, int, core.GetAllPostsParams) ([]core.Post, int, error)) *MockPostFavouriteStore_GetFavouritePosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostFavouriteByPostAndUserID provides a mock function with given fields: ctx, postID, userID
func (_m *MockPostFavouriteStore) GetPostFavouriteByPostAndUserID(ctx context.Context, postID int, userID int) (core.PostFavourite, error) {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostFavouriteByPostAndUserID")
	}

	var r0 core.PostFavourite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (core.PostFavourite, error)); ok {
		return rf(ctx, postID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.PostFavourite); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Get(0).(core.PostFavourite)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostFavouriteByPostAndUserID'
type MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call struct {
	*mock.Call
}

// GetPostFavouriteByPostAndUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *MockPostFavouriteStore_Expecter) GetPostFavouriteByPostAndUserID(ctx interface{}, postID interface{}, userID interface{}) *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	return &MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call{Call: _e.mock.On("GetPostFavouriteByPostAndUserID", ctx, postID, userID)}
}

func (_c *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call) Run(run func(ctx context.Context, postID int, userID int)) *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call) Return(_a0 core.PostFavourite, _a1 error) *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call) RunAndReturn(run func(context.Context, int, int) (core.PostFavourite, error)) *MockPostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostFavouriteStore creates a new instance of MockPostFavouriteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostFavouriteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostFavouriteStore {
	mock := &MockPostFavouriteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
