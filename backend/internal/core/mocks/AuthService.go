// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// AuthorizeVK provides a mock function with given fields: ctx, token
func (_m *AuthService) AuthorizeVK(ctx context.Context, token string) (*string, *string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeVK")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, *string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *string); ok {
		r1 = rf(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConfigVK provides a mock function with given fields:
func (_m *AuthService) ConfigVK() *oauth2.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigVK")
	}

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// GetJWTSecret provides a mock function with given fields:
func (_m *AuthService) GetJWTSecret() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJWTSecret")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// LoginBasic provides a mock function with given fields: ctx, user
func (_m *AuthService) LoginBasic(ctx context.Context, user core.User) (*string, *string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for LoginBasic")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) (*string, *string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User) *string); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User) *string); ok {
		r1 = rf(ctx, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Refresh provides a mock function with given fields: ctx, refreshSession
func (_m *AuthService) Refresh(ctx context.Context, refreshSession core.RefreshSession) (*string, *string, error) {
	ret := _m.Called(ctx, refreshSession)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.RefreshSession) (*string, *string, error)); ok {
		return rf(ctx, refreshSession)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.RefreshSession) *string); ok {
		r0 = rf(ctx, refreshSession)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.RefreshSession) *string); ok {
		r1 = rf(ctx, refreshSession)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.RefreshSession) error); ok {
		r2 = rf(ctx, refreshSession)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SignupBasic provides a mock function with given fields: ctx, user
func (_m *AuthService) SignupBasic(ctx context.Context, user core.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignupBasic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
