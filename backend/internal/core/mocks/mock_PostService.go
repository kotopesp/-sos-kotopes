// Code generated by mockery v2.46.3. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockPostService is an autogenerated mock type for the PostService type
type MockPostService struct {
	mock.Mock
}

type MockPostService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostService) EXPECT() *MockPostService_Expecter {
	return &MockPostService_Expecter{mock: &_m.Mock}
}

// AddPhotosPost provides a mock function with given fields: ctx, postID, photos
func (_m *MockPostService) AddPhotosPost(ctx context.Context, postID int, photos []core.Photo) ([]core.Photo, error) {
	ret := _m.Called(ctx, postID, photos)

	if len(ret) == 0 {
		panic("no return value specified for AddPhotosPost")
	}

	var r0 []core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []core.Photo) ([]core.Photo, error)); ok {
		return rf(ctx, postID, photos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []core.Photo) []core.Photo); ok {
		r0 = rf(ctx, postID, photos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []core.Photo) error); ok {
		r1 = rf(ctx, postID, photos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_AddPhotosPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPhotosPost'
type MockPostService_AddPhotosPost_Call struct {
	*mock.Call
}

// AddPhotosPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - photos []core.Photo
func (_e *MockPostService_Expecter) AddPhotosPost(ctx interface{}, postID interface{}, photos interface{}) *MockPostService_AddPhotosPost_Call {
	return &MockPostService_AddPhotosPost_Call{Call: _e.mock.On("AddPhotosPost", ctx, postID, photos)}
}

func (_c *MockPostService_AddPhotosPost_Call) Run(run func(ctx context.Context, postID int, photos []core.Photo)) *MockPostService_AddPhotosPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]core.Photo))
	})
	return _c
}

func (_c *MockPostService_AddPhotosPost_Call) Return(_a0 []core.Photo, _a1 error) *MockPostService_AddPhotosPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_AddPhotosPost_Call) RunAndReturn(run func(context.Context, int, []core.Photo) ([]core.Photo, error)) *MockPostService_AddPhotosPost_Call {
	_c.Call.Return(run)
	return _c
}

// AddToFavourites provides a mock function with given fields: ctx, postFavourite
func (_m *MockPostService) AddToFavourites(ctx context.Context, postFavourite core.PostFavourite) (core.PostDetails, error) {
	ret := _m.Called(ctx, postFavourite)

	if len(ret) == 0 {
		panic("no return value specified for AddToFavourites")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) (core.PostDetails, error)); ok {
		return rf(ctx, postFavourite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) core.PostDetails); ok {
		r0 = rf(ctx, postFavourite)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.PostFavourite) error); ok {
		r1 = rf(ctx, postFavourite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_AddToFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToFavourites'
type MockPostService_AddToFavourites_Call struct {
	*mock.Call
}

// AddToFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - postFavourite core.PostFavourite
func (_e *MockPostService_Expecter) AddToFavourites(ctx interface{}, postFavourite interface{}) *MockPostService_AddToFavourites_Call {
	return &MockPostService_AddToFavourites_Call{Call: _e.mock.On("AddToFavourites", ctx, postFavourite)}
}

func (_c *MockPostService_AddToFavourites_Call) Run(run func(ctx context.Context, postFavourite core.PostFavourite)) *MockPostService_AddToFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PostFavourite))
	})
	return _c
}

func (_c *MockPostService_AddToFavourites_Call) Return(_a0 core.PostDetails, _a1 error) *MockPostService_AddToFavourites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_AddToFavourites_Call) RunAndReturn(run func(context.Context, core.PostFavourite) (core.PostDetails, error)) *MockPostService_AddToFavourites_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, postDetails
func (_m *MockPostService) CreatePost(ctx context.Context, postDetails core.PostDetails) (core.PostDetails, error) {
	ret := _m.Called(ctx, postDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostDetails) (core.PostDetails, error)); ok {
		return rf(ctx, postDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.PostDetails) core.PostDetails); ok {
		r0 = rf(ctx, postDetails)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.PostDetails) error); ok {
		r1 = rf(ctx, postDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - postDetails core.PostDetails
func (_e *MockPostService_Expecter) CreatePost(ctx interface{}, postDetails interface{}) *MockPostService_CreatePost_Call {
	return &MockPostService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, postDetails)}
}

func (_c *MockPostService_CreatePost_Call) Run(run func(ctx context.Context, postDetails core.PostDetails)) *MockPostService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PostDetails))
	})
	return _c
}

func (_c *MockPostService_CreatePost_Call) Return(_a0 core.PostDetails, _a1 error) *MockPostService_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_CreatePost_Call) RunAndReturn(run func(context.Context, core.PostDetails) (core.PostDetails, error)) *MockPostService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFromFavourites provides a mock function with given fields: ctx, post
func (_m *MockPostService) DeleteFromFavourites(ctx context.Context, post core.PostFavourite) error {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFromFavourites")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostService_DeleteFromFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFromFavourites'
type MockPostService_DeleteFromFavourites_Call struct {
	*mock.Call
}

// DeleteFromFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.PostFavourite
func (_e *MockPostService_Expecter) DeleteFromFavourites(ctx interface{}, post interface{}) *MockPostService_DeleteFromFavourites_Call {
	return &MockPostService_DeleteFromFavourites_Call{Call: _e.mock.On("DeleteFromFavourites", ctx, post)}
}

func (_c *MockPostService_DeleteFromFavourites_Call) Run(run func(ctx context.Context, post core.PostFavourite)) *MockPostService_DeleteFromFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PostFavourite))
	})
	return _c
}

func (_c *MockPostService_DeleteFromFavourites_Call) Return(_a0 error) *MockPostService_DeleteFromFavourites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostService_DeleteFromFavourites_Call) RunAndReturn(run func(context.Context, core.PostFavourite) error) *MockPostService_DeleteFromFavourites_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, post
func (_m *MockPostService) DeletePost(ctx context.Context, post core.Post) error {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostService_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPostService_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.Post
func (_e *MockPostService_Expecter) DeletePost(ctx interface{}, post interface{}) *MockPostService_DeletePost_Call {
	return &MockPostService_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, post)}
}

func (_c *MockPostService_DeletePost_Call) Run(run func(ctx context.Context, post core.Post)) *MockPostService_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Post))
	})
	return _c
}

func (_c *MockPostService_DeletePost_Call) Return(_a0 error) *MockPostService_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostService_DeletePost_Call) RunAndReturn(run func(context.Context, core.Post) error) *MockPostService_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPosts provides a mock function with given fields: ctx, userID, params
func (_m *MockPostService) GetAllPosts(ctx context.Context, userID int, params core.GetAllPostsParams) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, userID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) []core.PostDetails); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, userID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostService_GetAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPosts'
type MockPostService_GetAllPosts_Call struct {
	*mock.Call
}

// GetAllPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetAllPostsParams
func (_e *MockPostService_Expecter) GetAllPosts(ctx interface{}, userID interface{}, params interface{}) *MockPostService_GetAllPosts_Call {
	return &MockPostService_GetAllPosts_Call{Call: _e.mock.On("GetAllPosts", ctx, userID, params)}
}

func (_c *MockPostService_GetAllPosts_Call) Run(run func(ctx context.Context, userID int, params core.GetAllPostsParams)) *MockPostService_GetAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *MockPostService_GetAllPosts_Call) Return(_a0 []core.PostDetails, _a1 int, _a2 error) *MockPostService_GetAllPosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPostService_GetAllPosts_Call) RunAndReturn(run func(context.Context, int, core.GetAllPostsParams) ([]core.PostDetails, int, error)) *MockPostService_GetAllPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetFavouritePosts provides a mock function with given fields: ctx, userID, params
func (_m *MockPostService) GetFavouritePosts(ctx context.Context, userID int, params core.GetAllPostsParams) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetFavouritePosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, userID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) []core.PostDetails); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, userID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostService_GetFavouritePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFavouritePosts'
type MockPostService_GetFavouritePosts_Call struct {
	*mock.Call
}

// GetFavouritePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetAllPostsParams
func (_e *MockPostService_Expecter) GetFavouritePosts(ctx interface{}, userID interface{}, params interface{}) *MockPostService_GetFavouritePosts_Call {
	return &MockPostService_GetFavouritePosts_Call{Call: _e.mock.On("GetFavouritePosts", ctx, userID, params)}
}

func (_c *MockPostService_GetFavouritePosts_Call) Run(run func(ctx context.Context, userID int, params core.GetAllPostsParams)) *MockPostService_GetFavouritePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *MockPostService_GetFavouritePosts_Call) Return(_a0 []core.PostDetails, _a1 int, _a2 error) *MockPostService_GetFavouritePosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPostService_GetFavouritePosts_Call) RunAndReturn(run func(context.Context, int, core.GetAllPostsParams) ([]core.PostDetails, int, error)) *MockPostService_GetFavouritePosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhotosPost provides a mock function with given fields: ctx, postID
func (_m *MockPostService) GetPhotosPost(ctx context.Context, postID int) ([]core.Photo, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPhotosPost")
	}

	var r0 []core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.Photo, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.Photo); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_GetPhotosPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhotosPost'
type MockPostService_GetPhotosPost_Call struct {
	*mock.Call
}

// GetPhotosPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *MockPostService_Expecter) GetPhotosPost(ctx interface{}, postID interface{}) *MockPostService_GetPhotosPost_Call {
	return &MockPostService_GetPhotosPost_Call{Call: _e.mock.On("GetPhotosPost", ctx, postID)}
}

func (_c *MockPostService_GetPhotosPost_Call) Run(run func(ctx context.Context, postID int)) *MockPostService_GetPhotosPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostService_GetPhotosPost_Call) Return(_a0 []core.Photo, _a1 error) *MockPostService_GetPhotosPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_GetPhotosPost_Call) RunAndReturn(run func(context.Context, int) ([]core.Photo, error)) *MockPostService_GetPhotosPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhotosPostByPhotoID provides a mock function with given fields: ctx, postID, photoID
func (_m *MockPostService) GetPhotosPostByPhotoID(ctx context.Context, postID int, photoID int) (core.Photo, error) {
	ret := _m.Called(ctx, postID, photoID)

	if len(ret) == 0 {
		panic("no return value specified for GetPhotosPostByPhotoID")
	}

	var r0 core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (core.Photo, error)); ok {
		return rf(ctx, postID, photoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.Photo); ok {
		r0 = rf(ctx, postID, photoID)
	} else {
		r0 = ret.Get(0).(core.Photo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, photoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_GetPhotosPostByPhotoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhotosPostByPhotoID'
type MockPostService_GetPhotosPostByPhotoID_Call struct {
	*mock.Call
}

// GetPhotosPostByPhotoID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - photoID int
func (_e *MockPostService_Expecter) GetPhotosPostByPhotoID(ctx interface{}, postID interface{}, photoID interface{}) *MockPostService_GetPhotosPostByPhotoID_Call {
	return &MockPostService_GetPhotosPostByPhotoID_Call{Call: _e.mock.On("GetPhotosPostByPhotoID", ctx, postID, photoID)}
}

func (_c *MockPostService_GetPhotosPostByPhotoID_Call) Run(run func(ctx context.Context, postID int, photoID int)) *MockPostService_GetPhotosPostByPhotoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPostService_GetPhotosPostByPhotoID_Call) Return(_a0 core.Photo, _a1 error) *MockPostService_GetPhotosPostByPhotoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_GetPhotosPostByPhotoID_Call) RunAndReturn(run func(context.Context, int, int) (core.Photo, error)) *MockPostService_GetPhotosPostByPhotoID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, postID, userID
func (_m *MockPostService) GetPostByID(ctx context.Context, postID int, userID int) (core.PostDetails, error) {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (core.PostDetails, error)); ok {
		return rf(ctx, postID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.PostDetails); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type MockPostService_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *MockPostService_Expecter) GetPostByID(ctx interface{}, postID interface{}, userID interface{}) *MockPostService_GetPostByID_Call {
	return &MockPostService_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, postID, userID)}
}

func (_c *MockPostService_GetPostByID_Call) Run(run func(ctx context.Context, postID int, userID int)) *MockPostService_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPostService_GetPostByID_Call) Return(_a0 core.PostDetails, _a1 error) *MockPostService_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_GetPostByID_Call) RunAndReturn(run func(context.Context, int, int) (core.PostDetails, error)) *MockPostService_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPosts provides a mock function with given fields: ctx, id
func (_m *MockPostService) GetUserPosts(ctx context.Context, id int) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.PostDetails); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPostService_GetUserPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPosts'
type MockPostService_GetUserPosts_Call struct {
	*mock.Call
}

// GetUserPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPostService_Expecter) GetUserPosts(ctx interface{}, id interface{}) *MockPostService_GetUserPosts_Call {
	return &MockPostService_GetUserPosts_Call{Call: _e.mock.On("GetUserPosts", ctx, id)}
}

func (_c *MockPostService_GetUserPosts_Call) Run(run func(ctx context.Context, id int)) *MockPostService_GetUserPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPostService_GetUserPosts_Call) Return(posts []core.PostDetails, count int, err error) *MockPostService_GetUserPosts_Call {
	_c.Call.Return(posts, count, err)
	return _c
}

func (_c *MockPostService_GetUserPosts_Call) RunAndReturn(run func(context.Context, int) ([]core.PostDetails, int, error)) *MockPostService_GetUserPosts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, updateRequestPost, updateRequestPhotos
func (_m *MockPostService) UpdatePost(ctx context.Context, updateRequestPost core.UpdateRequestPost, updateRequestPhotos core.UpdateRequestPhotos) (core.PostDetails, error) {
	ret := _m.Called(ctx, updateRequestPost, updateRequestPhotos)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRequestPost, core.UpdateRequestPhotos) (core.PostDetails, error)); ok {
		return rf(ctx, updateRequestPost, updateRequestPhotos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRequestPost, core.UpdateRequestPhotos) core.PostDetails); ok {
		r0 = rf(ctx, updateRequestPost, updateRequestPhotos)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateRequestPost, core.UpdateRequestPhotos) error); ok {
		r1 = rf(ctx, updateRequestPost, updateRequestPhotos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockPostService_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - updateRequestPost core.UpdateRequestPost
//   - updateRequestPhotos core.UpdateRequestPhotos
func (_e *MockPostService_Expecter) UpdatePost(ctx interface{}, updateRequestPost interface{}, updateRequestPhotos interface{}) *MockPostService_UpdatePost_Call {
	return &MockPostService_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, updateRequestPost, updateRequestPhotos)}
}

func (_c *MockPostService_UpdatePost_Call) Run(run func(ctx context.Context, updateRequestPost core.UpdateRequestPost, updateRequestPhotos core.UpdateRequestPhotos)) *MockPostService_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateRequestPost), args[2].(core.UpdateRequestPhotos))
	})
	return _c
}

func (_c *MockPostService_UpdatePost_Call) Return(_a0 core.PostDetails, _a1 error) *MockPostService_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_UpdatePost_Call) RunAndReturn(run func(context.Context, core.UpdateRequestPost, core.UpdateRequestPhotos) (core.PostDetails, error)) *MockPostService_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostService creates a new instance of MockPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostService {
	mock := &MockPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
