// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// CommentStore is an autogenerated mock type for the CommentStore type
type CommentStore struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *CommentStore) CreateComment(ctx context.Context, comment core.Comment) (core.Comment, error) {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 core.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) (core.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) core.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, comments
func (_m *CommentStore) DeleteComment(ctx context.Context, comments core.Comment) error {
	ret := _m.Called(ctx, comments)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) error); ok {
		r0 = rf(ctx, comments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllComments provides a mock function with given fields: ctx, params
func (_m *CommentStore) GetAllComments(ctx context.Context, params core.GetAllCommentsParams) ([]core.Comment, int, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComments")
	}

	var r0 []core.Comment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllCommentsParams) ([]core.Comment, int, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllCommentsParams) []core.Comment); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllCommentsParams) int); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.GetAllCommentsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCommentByID provides a mock function with given fields: ctx, commentID
func (_m *CommentStore) GetCommentByID(ctx context.Context, commentID int) (core.Comment, error) {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 core.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Comment, error)); ok {
		return rf(ctx, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, comments
func (_m *CommentStore) UpdateComment(ctx context.Context, comments core.Comment) (core.Comment, error) {
	ret := _m.Called(ctx, comments)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 core.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) (core.Comment, error)); ok {
		return rf(ctx, comments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) core.Comment); ok {
		r0 = rf(ctx, comments)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Comment) error); ok {
		r1 = rf(ctx, comments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentStore creates a new instance of CommentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentStore {
	mock := &CommentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
