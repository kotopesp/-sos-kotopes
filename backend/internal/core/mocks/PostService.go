// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// AddToFavourites provides a mock function with given fields: ctx, postFavourite
func (_m *PostService) AddToFavourites(ctx context.Context, postFavourite core.PostFavourite) error {
	ret := _m.Called(ctx, postFavourite)

	if len(ret) == 0 {
		panic("no return value specified for AddToFavourites")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) error); ok {
		r0 = rf(ctx, postFavourite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePost provides a mock function with given fields: ctx, postDetails, fileHeader
func (_m *PostService) CreatePost(ctx context.Context, postDetails core.PostDetails, fileHeader *multipart.FileHeader) (core.PostDetails, error) {
	ret := _m.Called(ctx, postDetails, fileHeader)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PostDetails, *multipart.FileHeader) (core.PostDetails, error)); ok {
		return rf(ctx, postDetails, fileHeader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.PostDetails, *multipart.FileHeader) core.PostDetails); ok {
		r0 = rf(ctx, postDetails, fileHeader)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.PostDetails, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, postDetails, fileHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFromFavourites provides a mock function with given fields: ctx, postID, userID
func (_m *PostService) DeleteFromFavourites(ctx context.Context, postID int, userID int) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFromFavourites")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePost provides a mock function with given fields: ctx, post
func (_m *PostService) DeletePost(ctx context.Context, post core.Post) error {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPosts provides a mock function with given fields: ctx, params
func (_m *PostService) GetAllPosts(ctx context.Context, params core.GetAllPostsParams) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllPostsParams) []core.PostDetails); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFavouritePosts provides a mock function with given fields: ctx, userID
func (_m *PostService) GetFavouritePosts(ctx context.Context, userID int) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFavouritePosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.PostDetails); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *PostService) GetPostByID(ctx context.Context, id int) (core.PostDetails, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.PostDetails, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.PostDetails); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPosts provides a mock function with given fields: ctx, id
func (_m *PostService) GetUserPosts(ctx context.Context, id int) ([]core.PostDetails, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for getUserPosts")
	}

	var r0 []core.PostDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.PostDetails, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.PostDetails); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PostDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePost provides a mock function with given fields: ctx, postUpdateRequest
func (_m *PostService) UpdatePost(ctx context.Context, postUpdateRequest core.UpdateRequestBodyPost) (core.PostDetails, error) {
	ret := _m.Called(ctx, postUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 core.PostDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRequestBodyPost) (core.PostDetails, error)); ok {
		return rf(ctx, postUpdateRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRequestBodyPost) core.PostDetails); ok {
		r0 = rf(ctx, postUpdateRequest)
	} else {
		r0 = ret.Get(0).(core.PostDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateRequestBodyPost) error); ok {
		r1 = rf(ctx, postUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
