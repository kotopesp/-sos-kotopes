// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockKeeperService is an autogenerated mock type for the KeeperService type
type MockKeeperService struct {
	mock.Mock
}

type MockKeeperService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperService) EXPECT() *MockKeeperService_Expecter {
	return &MockKeeperService_Expecter{mock: &_m.Mock}
}

// CreateKeeper provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperService) CreateKeeper(ctx context.Context, keeper core.Keeper) (core.Keeper, error) {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeeper")
	}

	var r0 core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Keeper) (core.Keeper, error)); ok {
		return rf(ctx, keeper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Keeper) core.Keeper); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Get(0).(core.Keeper)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Keeper) error); ok {
		r1 = rf(ctx, keeper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_CreateKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeeper'
type MockKeeperService_CreateKeeper_Call struct {
	*mock.Call
}

// CreateKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.Keeper
func (_e *MockKeeperService_Expecter) CreateKeeper(ctx interface{}, keeper interface{}) *MockKeeperService_CreateKeeper_Call {
	return &MockKeeperService_CreateKeeper_Call{Call: _e.mock.On("CreateKeeper", ctx, keeper)}
}

func (_c *MockKeeperService_CreateKeeper_Call) Run(run func(ctx context.Context, keeper core.Keeper)) *MockKeeperService_CreateKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Keeper))
	})
	return _c
}

func (_c *MockKeeperService_CreateKeeper_Call) Return(data core.Keeper, err error) *MockKeeperService_CreateKeeper_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_CreateKeeper_Call) RunAndReturn(run func(context.Context, core.Keeper) (core.Keeper, error)) *MockKeeperService_CreateKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReview provides a mock function with given fields: ctx, review
func (_m *MockKeeperService) CreateReview(ctx context.Context, review core.KeeperReview) (core.KeeperReview, error) {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.KeeperReview) (core.KeeperReview, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.KeeperReview) core.KeeperReview); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Get(0).(core.KeeperReview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.KeeperReview) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_CreateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReview'
type MockKeeperService_CreateReview_Call struct {
	*mock.Call
}

// CreateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - review core.KeeperReview
func (_e *MockKeeperService_Expecter) CreateReview(ctx interface{}, review interface{}) *MockKeeperService_CreateReview_Call {
	return &MockKeeperService_CreateReview_Call{Call: _e.mock.On("CreateReview", ctx, review)}
}

func (_c *MockKeeperService_CreateReview_Call) Run(run func(ctx context.Context, review core.KeeperReview)) *MockKeeperService_CreateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.KeeperReview))
	})
	return _c
}

func (_c *MockKeeperService_CreateReview_Call) Return(data core.KeeperReview, err error) *MockKeeperService_CreateReview_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_CreateReview_Call) RunAndReturn(run func(context.Context, core.KeeperReview) (core.KeeperReview, error)) *MockKeeperService_CreateReview_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeeper provides a mock function with given fields: ctx, id, userID
func (_m *MockKeeperService) DeleteKeeper(ctx context.Context, id int, userID int) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeeper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_DeleteKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeeper'
type MockKeeperService_DeleteKeeper_Call struct {
	*mock.Call
}

// DeleteKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
func (_e *MockKeeperService_Expecter) DeleteKeeper(ctx interface{}, id interface{}, userID interface{}) *MockKeeperService_DeleteKeeper_Call {
	return &MockKeeperService_DeleteKeeper_Call{Call: _e.mock.On("DeleteKeeper", ctx, id, userID)}
}

func (_c *MockKeeperService_DeleteKeeper_Call) Run(run func(ctx context.Context, id int, userID int)) *MockKeeperService_DeleteKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockKeeperService_DeleteKeeper_Call) Return(_a0 error) *MockKeeperService_DeleteKeeper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_DeleteKeeper_Call) RunAndReturn(run func(context.Context, int, int) error) *MockKeeperService_DeleteKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReview provides a mock function with given fields: ctx, id, userID
func (_m *MockKeeperService) DeleteReview(ctx context.Context, id int, userID int) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_DeleteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReview'
type MockKeeperService_DeleteReview_Call struct {
	*mock.Call
}

// DeleteReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
func (_e *MockKeeperService_Expecter) DeleteReview(ctx interface{}, id interface{}, userID interface{}) *MockKeeperService_DeleteReview_Call {
	return &MockKeeperService_DeleteReview_Call{Call: _e.mock.On("DeleteReview", ctx, id, userID)}
}

func (_c *MockKeeperService_DeleteReview_Call) Run(run func(ctx context.Context, id int, userID int)) *MockKeeperService_DeleteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockKeeperService_DeleteReview_Call) Return(_a0 error) *MockKeeperService_DeleteReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_DeleteReview_Call) RunAndReturn(run func(context.Context, int, int) error) *MockKeeperService_DeleteReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllKeepers provides a mock function with given fields: ctx, params
func (_m *MockKeeperService) GetAllKeepers(ctx context.Context, params core.GetAllKeepersParams) ([]core.Keeper, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllKeepers")
	}

	var r0 []core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) ([]core.Keeper, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) []core.Keeper); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Keeper)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllKeepersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetAllKeepers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllKeepers'
type MockKeeperService_GetAllKeepers_Call struct {
	*mock.Call
}

// GetAllKeepers is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllKeepersParams
func (_e *MockKeeperService_Expecter) GetAllKeepers(ctx interface{}, params interface{}) *MockKeeperService_GetAllKeepers_Call {
	return &MockKeeperService_GetAllKeepers_Call{Call: _e.mock.On("GetAllKeepers", ctx, params)}
}

func (_c *MockKeeperService_GetAllKeepers_Call) Run(run func(ctx context.Context, params core.GetAllKeepersParams)) *MockKeeperService_GetAllKeepers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllKeepersParams))
	})
	return _c
}

func (_c *MockKeeperService_GetAllKeepers_Call) Return(data []core.Keeper, err error) *MockKeeperService_GetAllKeepers_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_GetAllKeepers_Call) RunAndReturn(run func(context.Context, core.GetAllKeepersParams) ([]core.Keeper, error)) *MockKeeperService_GetAllKeepers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllReviews provides a mock function with given fields: ctx, keeperID, params
func (_m *MockKeeperService) GetAllReviews(ctx context.Context, keeperID int, params core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error) {
	ret := _m.Called(ctx, keeperID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 []core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error)); ok {
		return rf(ctx, keeperID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllKeeperReviewsParams) []core.KeeperReview); ok {
		r0 = rf(ctx, keeperID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.KeeperReview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllKeeperReviewsParams) error); ok {
		r1 = rf(ctx, keeperID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetAllReviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllReviews'
type MockKeeperService_GetAllReviews_Call struct {
	*mock.Call
}

// GetAllReviews is a helper method to define mock.On call
//   - ctx context.Context
//   - keeperID int
//   - params core.GetAllKeeperReviewsParams
func (_e *MockKeeperService_Expecter) GetAllReviews(ctx interface{}, keeperID interface{}, params interface{}) *MockKeeperService_GetAllReviews_Call {
	return &MockKeeperService_GetAllReviews_Call{Call: _e.mock.On("GetAllReviews", ctx, keeperID, params)}
}

func (_c *MockKeeperService_GetAllReviews_Call) Run(run func(ctx context.Context, keeperID int, params core.GetAllKeeperReviewsParams)) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllKeeperReviewsParams))
	})
	return _c
}

func (_c *MockKeeperService_GetAllReviews_Call) Return(data []core.KeeperReview, err error) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_GetAllReviews_Call) RunAndReturn(run func(context.Context, int, core.GetAllKeeperReviewsParams) ([]core.KeeperReview, error)) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeepeByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperService) GetKeepeByID(ctx context.Context, id int) (core.Keeper, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetKeepeByID")
	}

	var r0 core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.Keeper, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Keeper); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Keeper)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetKeepeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeepeByID'
type MockKeeperService_GetKeepeByID_Call struct {
	*mock.Call
}

// GetKeepeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperService_Expecter) GetKeepeByID(ctx interface{}, id interface{}) *MockKeeperService_GetKeepeByID_Call {
	return &MockKeeperService_GetKeepeByID_Call{Call: _e.mock.On("GetKeepeByID", ctx, id)}
}

func (_c *MockKeeperService_GetKeepeByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperService_GetKeepeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperService_GetKeepeByID_Call) Return(data core.Keeper, err error) *MockKeeperService_GetKeepeByID_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_GetKeepeByID_Call) RunAndReturn(run func(context.Context, int) (core.Keeper, error)) *MockKeeperService_GetKeepeByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeeper provides a mock function with given fields: ctx, id, userID, keeper
func (_m *MockKeeperService) UpdateKeeper(ctx context.Context, id int, userID int, keeper core.Keeper) (core.Keeper, error) {
	ret := _m.Called(ctx, id, userID, keeper)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeeper")
	}

	var r0 core.Keeper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, core.Keeper) (core.Keeper, error)); ok {
		return rf(ctx, id, userID, keeper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, core.Keeper) core.Keeper); ok {
		r0 = rf(ctx, id, userID, keeper)
	} else {
		r0 = ret.Get(0).(core.Keeper)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, core.Keeper) error); ok {
		r1 = rf(ctx, id, userID, keeper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_UpdateKeeper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeeper'
type MockKeeperService_UpdateKeeper_Call struct {
	*mock.Call
}

// UpdateKeeper is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
//   - keeper core.Keeper
func (_e *MockKeeperService_Expecter) UpdateKeeper(ctx interface{}, id interface{}, userID interface{}, keeper interface{}) *MockKeeperService_UpdateKeeper_Call {
	return &MockKeeperService_UpdateKeeper_Call{Call: _e.mock.On("UpdateKeeper", ctx, id, userID, keeper)}
}

func (_c *MockKeeperService_UpdateKeeper_Call) Run(run func(ctx context.Context, id int, userID int, keeper core.Keeper)) *MockKeeperService_UpdateKeeper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(core.Keeper))
	})
	return _c
}

func (_c *MockKeeperService_UpdateKeeper_Call) Return(_a0 core.Keeper, _a1 error) *MockKeeperService_UpdateKeeper_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_UpdateKeeper_Call) RunAndReturn(run func(context.Context, int, int, core.Keeper) (core.Keeper, error)) *MockKeeperService_UpdateKeeper_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReview provides a mock function with given fields: ctx, id, userID, review
func (_m *MockKeeperService) UpdateReview(ctx context.Context, id int, userID int, review core.KeeperReview) (core.KeeperReview, error) {
	ret := _m.Called(ctx, id, userID, review)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 core.KeeperReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, core.KeeperReview) (core.KeeperReview, error)); ok {
		return rf(ctx, id, userID, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, core.KeeperReview) core.KeeperReview); ok {
		r0 = rf(ctx, id, userID, review)
	} else {
		r0 = ret.Get(0).(core.KeeperReview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, core.KeeperReview) error); ok {
		r1 = rf(ctx, id, userID, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_UpdateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReview'
type MockKeeperService_UpdateReview_Call struct {
	*mock.Call
}

// UpdateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
//   - review core.KeeperReview
func (_e *MockKeeperService_Expecter) UpdateReview(ctx interface{}, id interface{}, userID interface{}, review interface{}) *MockKeeperService_UpdateReview_Call {
	return &MockKeeperService_UpdateReview_Call{Call: _e.mock.On("UpdateReview", ctx, id, userID, review)}
}

func (_c *MockKeeperService_UpdateReview_Call) Run(run func(ctx context.Context, id int, userID int, review core.KeeperReview)) *MockKeeperService_UpdateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(core.KeeperReview))
	})
	return _c
}

func (_c *MockKeeperService_UpdateReview_Call) Return(data core.KeeperReview, err error) *MockKeeperService_UpdateReview_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockKeeperService_UpdateReview_Call) RunAndReturn(run func(context.Context, int, int, core.KeeperReview) (core.KeeperReview, error)) *MockKeeperService_UpdateReview_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeeperService creates a new instance of MockKeeperService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeeperService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeeperService {
	mock := &MockKeeperService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
