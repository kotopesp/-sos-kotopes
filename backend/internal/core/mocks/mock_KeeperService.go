// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockKeeperService is an autogenerated mock type for the KeeperService type
type MockKeeperService struct {
	mock.Mock
}

type MockKeeperService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperService) EXPECT() *MockKeeperService_Expecter {
	return &MockKeeperService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperService) Create(ctx context.Context, keeper core.Keepers) error {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Keepers) error); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockKeeperService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.Keepers
func (_e *MockKeeperService_Expecter) Create(ctx interface{}, keeper interface{}) *MockKeeperService_Create_Call {
	return &MockKeeperService_Create_Call{Call: _e.mock.On("Create", ctx, keeper)}
}

func (_c *MockKeeperService_Create_Call) Run(run func(ctx context.Context, keeper core.Keepers)) *MockKeeperService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Keepers))
	})
	return _c
}

func (_c *MockKeeperService_Create_Call) Return(_a0 error) *MockKeeperService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_Create_Call) RunAndReturn(run func(context.Context, core.Keepers) error) *MockKeeperService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReview provides a mock function with given fields: ctx, keeperReview
func (_m *MockKeeperService) CreateReview(ctx context.Context, keeperReview core.KeeperReviews) error {
	ret := _m.Called(ctx, keeperReview)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.KeeperReviews) error); ok {
		r0 = rf(ctx, keeperReview)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_CreateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReview'
type MockKeeperService_CreateReview_Call struct {
	*mock.Call
}

// CreateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - keeperReview core.KeeperReviews
func (_e *MockKeeperService_Expecter) CreateReview(ctx interface{}, keeperReview interface{}) *MockKeeperService_CreateReview_Call {
	return &MockKeeperService_CreateReview_Call{Call: _e.mock.On("CreateReview", ctx, keeperReview)}
}

func (_c *MockKeeperService_CreateReview_Call) Run(run func(ctx context.Context, keeperReview core.KeeperReviews)) *MockKeeperService_CreateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.KeeperReviews))
	})
	return _c
}

func (_c *MockKeeperService_CreateReview_Call) Return(_a0 error) *MockKeeperService_CreateReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_CreateReview_Call) RunAndReturn(run func(context.Context, core.KeeperReviews) error) *MockKeeperService_CreateReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, params
func (_m *MockKeeperService) GetAll(ctx context.Context, params core.GetAllKeepersParams) ([]core.KeepersDetails, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []core.KeepersDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) ([]core.KeepersDetails, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeepersParams) []core.KeepersDetails); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.KeepersDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllKeepersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockKeeperService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllKeepersParams
func (_e *MockKeeperService_Expecter) GetAll(ctx interface{}, params interface{}) *MockKeeperService_GetAll_Call {
	return &MockKeeperService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, params)}
}

func (_c *MockKeeperService_GetAll_Call) Run(run func(ctx context.Context, params core.GetAllKeepersParams)) *MockKeeperService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllKeepersParams))
	})
	return _c
}

func (_c *MockKeeperService_GetAll_Call) Return(_a0 []core.KeepersDetails, _a1 error) *MockKeeperService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_GetAll_Call) RunAndReturn(run func(context.Context, core.GetAllKeepersParams) ([]core.KeepersDetails, error)) *MockKeeperService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllReviews provides a mock function with given fields: ctx, params, id
func (_m *MockKeeperService) GetAllReviews(ctx context.Context, params core.GetAllKeeperReviewsParams, id int) ([]core.KeeperReviewsDetails, error) {
	ret := _m.Called(ctx, params, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 []core.KeeperReviewsDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeeperReviewsParams, int) ([]core.KeeperReviewsDetails, error)); ok {
		return rf(ctx, params, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllKeeperReviewsParams, int) []core.KeeperReviewsDetails); ok {
		r0 = rf(ctx, params, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.KeeperReviewsDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllKeeperReviewsParams, int) error); ok {
		r1 = rf(ctx, params, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetAllReviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllReviews'
type MockKeeperService_GetAllReviews_Call struct {
	*mock.Call
}

// GetAllReviews is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllKeeperReviewsParams
//   - id int
func (_e *MockKeeperService_Expecter) GetAllReviews(ctx interface{}, params interface{}, id interface{}) *MockKeeperService_GetAllReviews_Call {
	return &MockKeeperService_GetAllReviews_Call{Call: _e.mock.On("GetAllReviews", ctx, params, id)}
}

func (_c *MockKeeperService_GetAllReviews_Call) Run(run func(ctx context.Context, params core.GetAllKeeperReviewsParams, id int)) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllKeeperReviewsParams), args[2].(int))
	})
	return _c
}

func (_c *MockKeeperService_GetAllReviews_Call) Return(_a0 []core.KeeperReviewsDetails, _a1 error) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_GetAllReviews_Call) RunAndReturn(run func(context.Context, core.GetAllKeeperReviewsParams, int) ([]core.KeeperReviewsDetails, error)) *MockKeeperService_GetAllReviews_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockKeeperService) GetByID(ctx context.Context, id int) (core.KeepersDetails, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 core.KeepersDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (core.KeepersDetails, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) core.KeepersDetails); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.KeepersDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockKeeperService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockKeeperService_Expecter) GetByID(ctx interface{}, id interface{}) *MockKeeperService_GetByID_Call {
	return &MockKeeperService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockKeeperService_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockKeeperService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockKeeperService_GetByID_Call) Return(_a0 core.KeepersDetails, _a1 error) *MockKeeperService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_GetByID_Call) RunAndReturn(run func(context.Context, int) (core.KeepersDetails, error)) *MockKeeperService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteByID provides a mock function with given fields: ctx, id, userID
func (_m *MockKeeperService) SoftDeleteByID(ctx context.Context, id int, userID int) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_SoftDeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteByID'
type MockKeeperService_SoftDeleteByID_Call struct {
	*mock.Call
}

// SoftDeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
func (_e *MockKeeperService_Expecter) SoftDeleteByID(ctx interface{}, id interface{}, userID interface{}) *MockKeeperService_SoftDeleteByID_Call {
	return &MockKeeperService_SoftDeleteByID_Call{Call: _e.mock.On("SoftDeleteByID", ctx, id, userID)}
}

func (_c *MockKeeperService_SoftDeleteByID_Call) Run(run func(ctx context.Context, id int, userID int)) *MockKeeperService_SoftDeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockKeeperService_SoftDeleteByID_Call) Return(_a0 error) *MockKeeperService_SoftDeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_SoftDeleteByID_Call) RunAndReturn(run func(context.Context, int, int) error) *MockKeeperService_SoftDeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteReviewByID provides a mock function with given fields: ctx, id, userID
func (_m *MockKeeperService) SoftDeleteReviewByID(ctx context.Context, id int, userID int) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteReviewByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeeperService_SoftDeleteReviewByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteReviewByID'
type MockKeeperService_SoftDeleteReviewByID_Call struct {
	*mock.Call
}

// SoftDeleteReviewByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
func (_e *MockKeeperService_Expecter) SoftDeleteReviewByID(ctx interface{}, id interface{}, userID interface{}) *MockKeeperService_SoftDeleteReviewByID_Call {
	return &MockKeeperService_SoftDeleteReviewByID_Call{Call: _e.mock.On("SoftDeleteReviewByID", ctx, id, userID)}
}

func (_c *MockKeeperService_SoftDeleteReviewByID_Call) Run(run func(ctx context.Context, id int, userID int)) *MockKeeperService_SoftDeleteReviewByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockKeeperService_SoftDeleteReviewByID_Call) Return(_a0 error) *MockKeeperService_SoftDeleteReviewByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperService_SoftDeleteReviewByID_Call) RunAndReturn(run func(context.Context, int, int) error) *MockKeeperService_SoftDeleteReviewByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, keeper
func (_m *MockKeeperService) UpdateByID(ctx context.Context, keeper core.UpdateKeepers) (core.KeepersDetails, error) {
	ret := _m.Called(ctx, keeper)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 core.KeepersDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeepers) (core.KeepersDetails, error)); ok {
		return rf(ctx, keeper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeepers) core.KeepersDetails); ok {
		r0 = rf(ctx, keeper)
	} else {
		r0 = ret.Get(0).(core.KeepersDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateKeepers) error); ok {
		r1 = rf(ctx, keeper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockKeeperService_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - keeper core.UpdateKeepers
func (_e *MockKeeperService_Expecter) UpdateByID(ctx interface{}, keeper interface{}) *MockKeeperService_UpdateByID_Call {
	return &MockKeeperService_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, keeper)}
}

func (_c *MockKeeperService_UpdateByID_Call) Run(run func(ctx context.Context, keeper core.UpdateKeepers)) *MockKeeperService_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateKeepers))
	})
	return _c
}

func (_c *MockKeeperService_UpdateByID_Call) Return(_a0 core.KeepersDetails, _a1 error) *MockKeeperService_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_UpdateByID_Call) RunAndReturn(run func(context.Context, core.UpdateKeepers) (core.KeepersDetails, error)) *MockKeeperService_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReviewByID provides a mock function with given fields: ctx, keeperReview
func (_m *MockKeeperService) UpdateReviewByID(ctx context.Context, keeperReview core.UpdateKeeperReviews) (core.KeeperReviewsDetails, error) {
	ret := _m.Called(ctx, keeperReview)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReviewByID")
	}

	var r0 core.KeeperReviewsDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeeperReviews) (core.KeeperReviewsDetails, error)); ok {
		return rf(ctx, keeperReview)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateKeeperReviews) core.KeeperReviewsDetails); ok {
		r0 = rf(ctx, keeperReview)
	} else {
		r0 = ret.Get(0).(core.KeeperReviewsDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateKeeperReviews) error); ok {
		r1 = rf(ctx, keeperReview)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperService_UpdateReviewByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReviewByID'
type MockKeeperService_UpdateReviewByID_Call struct {
	*mock.Call
}

// UpdateReviewByID is a helper method to define mock.On call
//   - ctx context.Context
//   - keeperReview core.UpdateKeeperReviews
func (_e *MockKeeperService_Expecter) UpdateReviewByID(ctx interface{}, keeperReview interface{}) *MockKeeperService_UpdateReviewByID_Call {
	return &MockKeeperService_UpdateReviewByID_Call{Call: _e.mock.On("UpdateReviewByID", ctx, keeperReview)}
}

func (_c *MockKeeperService_UpdateReviewByID_Call) Run(run func(ctx context.Context, keeperReview core.UpdateKeeperReviews)) *MockKeeperService_UpdateReviewByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateKeeperReviews))
	})
	return _c
}

func (_c *MockKeeperService_UpdateReviewByID_Call) Return(_a0 core.KeeperReviewsDetails, _a1 error) *MockKeeperService_UpdateReviewByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperService_UpdateReviewByID_Call) RunAndReturn(run func(context.Context, core.UpdateKeeperReviews) (core.KeeperReviewsDetails, error)) *MockKeeperService_UpdateReviewByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeeperService creates a new instance of MockKeeperService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeeperService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeeperService {
	mock := &MockKeeperService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
