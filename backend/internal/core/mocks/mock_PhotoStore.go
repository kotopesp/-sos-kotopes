// Code generated by mockery v2.46.3. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockPhotoStore is an autogenerated mock type for the PhotoStore type
type MockPhotoStore struct {
	mock.Mock
}

type MockPhotoStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPhotoStore) EXPECT() *MockPhotoStore_Expecter {
	return &MockPhotoStore_Expecter{mock: &_m.Mock}
}

// AddPhotoPost provides a mock function with given fields: ctx, photo
func (_m *MockPhotoStore) AddPhotoPost(ctx context.Context, photo core.Photo) (core.Photo, error) {
	ret := _m.Called(ctx, photo)

	if len(ret) == 0 {
		panic("no return value specified for AddPhotoPost")
	}

	var r0 core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Photo) (core.Photo, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.Photo) core.Photo); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(core.Photo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.Photo) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhotoStore_AddPhotoPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPhotoPost'
type MockPhotoStore_AddPhotoPost_Call struct {
	*mock.Call
}

// AddPhotoPost is a helper method to define mock.On call
//   - ctx context.Context
//   - photo core.Photo
func (_e *MockPhotoStore_Expecter) AddPhotoPost(ctx interface{}, photo interface{}) *MockPhotoStore_AddPhotoPost_Call {
	return &MockPhotoStore_AddPhotoPost_Call{Call: _e.mock.On("AddPhotoPost", ctx, photo)}
}

func (_c *MockPhotoStore_AddPhotoPost_Call) Run(run func(ctx context.Context, photo core.Photo)) *MockPhotoStore_AddPhotoPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Photo))
	})
	return _c
}

func (_c *MockPhotoStore_AddPhotoPost_Call) Return(_a0 core.Photo, _a1 error) *MockPhotoStore_AddPhotoPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhotoStore_AddPhotoPost_Call) RunAndReturn(run func(context.Context, core.Photo) (core.Photo, error)) *MockPhotoStore_AddPhotoPost_Call {
	_c.Call.Return(run)
	return _c
}

// AddPhotosPost provides a mock function with given fields: ctx, postID, photos
func (_m *MockPhotoStore) AddPhotosPost(ctx context.Context, postID int, photos []core.Photo) ([]core.Photo, error) {
	ret := _m.Called(ctx, postID, photos)

	if len(ret) == 0 {
		panic("no return value specified for AddPhotosPost")
	}

	var r0 []core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []core.Photo) ([]core.Photo, error)); ok {
		return rf(ctx, postID, photos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []core.Photo) []core.Photo); ok {
		r0 = rf(ctx, postID, photos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []core.Photo) error); ok {
		r1 = rf(ctx, postID, photos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhotoStore_AddPhotosPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPhotosPost'
type MockPhotoStore_AddPhotosPost_Call struct {
	*mock.Call
}

// AddPhotosPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - photos []core.Photo
func (_e *MockPhotoStore_Expecter) AddPhotosPost(ctx interface{}, postID interface{}, photos interface{}) *MockPhotoStore_AddPhotosPost_Call {
	return &MockPhotoStore_AddPhotosPost_Call{Call: _e.mock.On("AddPhotosPost", ctx, postID, photos)}
}

func (_c *MockPhotoStore_AddPhotosPost_Call) Run(run func(ctx context.Context, postID int, photos []core.Photo)) *MockPhotoStore_AddPhotosPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]core.Photo))
	})
	return _c
}

func (_c *MockPhotoStore_AddPhotosPost_Call) Return(_a0 []core.Photo, _a1 error) *MockPhotoStore_AddPhotosPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhotoStore_AddPhotosPost_Call) RunAndReturn(run func(context.Context, int, []core.Photo) ([]core.Photo, error)) *MockPhotoStore_AddPhotosPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhotosPost provides a mock function with given fields: ctx, postID
func (_m *MockPhotoStore) GetPhotosPost(ctx context.Context, postID int) ([]core.Photo, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPhotosPost")
	}

	var r0 []core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]core.Photo, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.Photo); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhotoStore_GetPhotosPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhotosPost'
type MockPhotoStore_GetPhotosPost_Call struct {
	*mock.Call
}

// GetPhotosPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *MockPhotoStore_Expecter) GetPhotosPost(ctx interface{}, postID interface{}) *MockPhotoStore_GetPhotosPost_Call {
	return &MockPhotoStore_GetPhotosPost_Call{Call: _e.mock.On("GetPhotosPost", ctx, postID)}
}

func (_c *MockPhotoStore_GetPhotosPost_Call) Run(run func(ctx context.Context, postID int)) *MockPhotoStore_GetPhotosPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPhotoStore_GetPhotosPost_Call) Return(_a0 []core.Photo, _a1 error) *MockPhotoStore_GetPhotosPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhotoStore_GetPhotosPost_Call) RunAndReturn(run func(context.Context, int) ([]core.Photo, error)) *MockPhotoStore_GetPhotosPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhotosPostByPhotoID provides a mock function with given fields: ctx, postID, photoID
func (_m *MockPhotoStore) GetPhotosPostByPhotoID(ctx context.Context, postID int, photoID int) (core.Photo, error) {
	ret := _m.Called(ctx, postID, photoID)

	if len(ret) == 0 {
		panic("no return value specified for GetPhotosPostByPhotoID")
	}

	var r0 core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (core.Photo, error)); ok {
		return rf(ctx, postID, photoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.Photo); ok {
		r0 = rf(ctx, postID, photoID)
	} else {
		r0 = ret.Get(0).(core.Photo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, photoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhotoStore_GetPhotosPostByPhotoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhotosPostByPhotoID'
type MockPhotoStore_GetPhotosPostByPhotoID_Call struct {
	*mock.Call
}

// GetPhotosPostByPhotoID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - photoID int
func (_e *MockPhotoStore_Expecter) GetPhotosPostByPhotoID(ctx interface{}, postID interface{}, photoID interface{}) *MockPhotoStore_GetPhotosPostByPhotoID_Call {
	return &MockPhotoStore_GetPhotosPostByPhotoID_Call{Call: _e.mock.On("GetPhotosPostByPhotoID", ctx, postID, photoID)}
}

func (_c *MockPhotoStore_GetPhotosPostByPhotoID_Call) Run(run func(ctx context.Context, postID int, photoID int)) *MockPhotoStore_GetPhotosPostByPhotoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPhotoStore_GetPhotosPostByPhotoID_Call) Return(_a0 core.Photo, _a1 error) *MockPhotoStore_GetPhotosPostByPhotoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhotoStore_GetPhotosPostByPhotoID_Call) RunAndReturn(run func(context.Context, int, int) (core.Photo, error)) *MockPhotoStore_GetPhotosPostByPhotoID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePhotosPost provides a mock function with given fields: ctx, photos
func (_m *MockPhotoStore) UpdatePhotosPost(ctx context.Context, photos []core.Photo) ([]core.Photo, error) {
	ret := _m.Called(ctx, photos)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhotosPost")
	}

	var r0 []core.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []core.Photo) ([]core.Photo, error)); ok {
		return rf(ctx, photos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []core.Photo) []core.Photo); ok {
		r0 = rf(ctx, photos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []core.Photo) error); ok {
		r1 = rf(ctx, photos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhotoStore_UpdatePhotosPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePhotosPost'
type MockPhotoStore_UpdatePhotosPost_Call struct {
	*mock.Call
}

// UpdatePhotosPost is a helper method to define mock.On call
//   - ctx context.Context
//   - photos []core.Photo
func (_e *MockPhotoStore_Expecter) UpdatePhotosPost(ctx interface{}, photos interface{}) *MockPhotoStore_UpdatePhotosPost_Call {
	return &MockPhotoStore_UpdatePhotosPost_Call{Call: _e.mock.On("UpdatePhotosPost", ctx, photos)}
}

func (_c *MockPhotoStore_UpdatePhotosPost_Call) Run(run func(ctx context.Context, photos []core.Photo)) *MockPhotoStore_UpdatePhotosPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]core.Photo))
	})
	return _c
}

func (_c *MockPhotoStore_UpdatePhotosPost_Call) Return(_a0 []core.Photo, _a1 error) *MockPhotoStore_UpdatePhotosPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhotoStore_UpdatePhotosPost_Call) RunAndReturn(run func(context.Context, []core.Photo) ([]core.Photo, error)) *MockPhotoStore_UpdatePhotosPost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPhotoStore creates a new instance of MockPhotoStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPhotoStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPhotoStore {
	mock := &MockPhotoStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
