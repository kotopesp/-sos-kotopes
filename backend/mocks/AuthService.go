// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// AuthorizeVK provides a mock function with given fields: ctx, token
func (_m *AuthService) AuthorizeVK(ctx context.Context, token string) (*string, *string, error) {
	ret := _m.Called(ctx, token)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 *string
	if rf, ok := ret.Get(1).(func(context.Context, string) *string); ok {
		r1 = rf(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_AuthorizeVK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeVK'
type AuthService_AuthorizeVK_Call struct {
	*mock.Call
}

// AuthorizeVK is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *AuthService_Expecter) AuthorizeVK(ctx interface{}, token interface{}) *AuthService_AuthorizeVK_Call {
	return &AuthService_AuthorizeVK_Call{Call: _e.mock.On("AuthorizeVK", ctx, token)}
}

func (_c *AuthService_AuthorizeVK_Call) Run(run func(ctx context.Context, token string)) *AuthService_AuthorizeVK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_AuthorizeVK_Call) Return(accessToken *string, refreshToken *string, err error) *AuthService_AuthorizeVK_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

// ConfigVK provides a mock function with given fields:
func (_m *AuthService) ConfigVK() *oauth2.Config {
	ret := _m.Called()

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// AuthService_ConfigVK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigVK'
type AuthService_ConfigVK_Call struct {
	*mock.Call
}

// ConfigVK is a helper method to define mock.On call
func (_e *AuthService_Expecter) ConfigVK() *AuthService_ConfigVK_Call {
	return &AuthService_ConfigVK_Call{Call: _e.mock.On("ConfigVK")}
}

func (_c *AuthService_ConfigVK_Call) Run(run func()) *AuthService_ConfigVK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthService_ConfigVK_Call) Return(_a0 *oauth2.Config) *AuthService_ConfigVK_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetJWTSecret provides a mock function with given fields:
func (_m *AuthService) GetJWTSecret() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// AuthService_GetJWTSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJWTSecret'
type AuthService_GetJWTSecret_Call struct {
	*mock.Call
}

// GetJWTSecret is a helper method to define mock.On call
func (_e *AuthService_Expecter) GetJWTSecret() *AuthService_GetJWTSecret_Call {
	return &AuthService_GetJWTSecret_Call{Call: _e.mock.On("GetJWTSecret")}
}

func (_c *AuthService_GetJWTSecret_Call) Run(run func()) *AuthService_GetJWTSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthService_GetJWTSecret_Call) Return(_a0 []byte) *AuthService_GetJWTSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

// LoginBasic provides a mock function with given fields: ctx, user
func (_m *AuthService) LoginBasic(ctx context.Context, user core.User) (*string, *string, error) {
	ret := _m.Called(ctx, user)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, core.User) *string); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 *string
	if rf, ok := ret.Get(1).(func(context.Context, core.User) *string); ok {
		r1 = rf(ctx, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, core.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_LoginBasic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginBasic'
type AuthService_LoginBasic_Call struct {
	*mock.Call
}

// LoginBasic is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *AuthService_Expecter) LoginBasic(ctx interface{}, user interface{}) *AuthService_LoginBasic_Call {
	return &AuthService_LoginBasic_Call{Call: _e.mock.On("LoginBasic", ctx, user)}
}

func (_c *AuthService_LoginBasic_Call) Run(run func(ctx context.Context, user core.User)) *AuthService_LoginBasic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *AuthService_LoginBasic_Call) Return(accessToken *string, refreshToken *string, err error) *AuthService_LoginBasic_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

// Refresh provides a mock function with given fields: ctx, refreshSession
func (_m *AuthService) Refresh(ctx context.Context, refreshSession core.RefreshSession) (*string, *string, error) {
	ret := _m.Called(ctx, refreshSession)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, core.RefreshSession) *string); ok {
		r0 = rf(ctx, refreshSession)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 *string
	if rf, ok := ret.Get(1).(func(context.Context, core.RefreshSession) *string); ok {
		r1 = rf(ctx, refreshSession)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, core.RefreshSession) error); ok {
		r2 = rf(ctx, refreshSession)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshSession core.RefreshSession
func (_e *AuthService_Expecter) Refresh(ctx interface{}, refreshSession interface{}) *AuthService_Refresh_Call {
	return &AuthService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshSession)}
}

func (_c *AuthService_Refresh_Call) Run(run func(ctx context.Context, refreshSession core.RefreshSession)) *AuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.RefreshSession))
	})
	return _c
}

func (_c *AuthService_Refresh_Call) Return(accessToken *string, refreshToken *string, err error) *AuthService_Refresh_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

// SignupBasic provides a mock function with given fields: ctx, user
func (_m *AuthService) SignupBasic(ctx context.Context, user core.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_SignupBasic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignupBasic'
type AuthService_SignupBasic_Call struct {
	*mock.Call
}

// SignupBasic is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *AuthService_Expecter) SignupBasic(ctx interface{}, user interface{}) *AuthService_SignupBasic_Call {
	return &AuthService_SignupBasic_Call{Call: _e.mock.On("SignupBasic", ctx, user)}
}

func (_c *AuthService_SignupBasic_Call) Run(run func(ctx context.Context, user core.User)) *AuthService_SignupBasic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *AuthService_SignupBasic_Call) Return(_a0 error) *AuthService_SignupBasic_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
