// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

type UserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStore) EXPECT() *UserStore_Expecter {
	return &UserStore_Expecter{mock: &_m.Mock}
}

// AddExternalUser provides a mock function with given fields: ctx, user, externalUserID, authProvider
func (_m *UserStore) AddExternalUser(ctx context.Context, user core.User, externalUserID int, authProvider string) (int, error) {
	ret := _m.Called(ctx, user, externalUserID, authProvider)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, core.User, int, string) int); ok {
		r0 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.User, int, string) error); ok {
		r1 = rf(ctx, user, externalUserID, authProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_AddExternalUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExternalUser'
type UserStore_AddExternalUser_Call struct {
	*mock.Call
}

// AddExternalUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
//   - externalUserID int
//   - authProvider string
func (_e *UserStore_Expecter) AddExternalUser(ctx interface{}, user interface{}, externalUserID interface{}, authProvider interface{}) *UserStore_AddExternalUser_Call {
	return &UserStore_AddExternalUser_Call{Call: _e.mock.On("AddExternalUser", ctx, user, externalUserID, authProvider)}
}

func (_c *UserStore_AddExternalUser_Call) Run(run func(ctx context.Context, user core.User, externalUserID int, authProvider string)) *UserStore_AddExternalUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *UserStore_AddExternalUser_Call) Return(userID int, err error) *UserStore_AddExternalUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *UserStore) AddUser(ctx context.Context, user core.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, core.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type UserStore_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *UserStore_Expecter) AddUser(ctx interface{}, user interface{}) *UserStore_AddUser_Call {
	return &UserStore_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *UserStore_AddUser_Call) Run(run func(ctx context.Context, user core.User)) *UserStore_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *UserStore_AddUser_Call) Return(userID int, err error) *UserStore_AddUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserStore) GetUser(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *UserStore_Expecter) GetUser(ctx interface{}, id interface{}) *UserStore_GetUser_Call {
	return &UserStore_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserStore_GetUser_Call) Run(run func(ctx context.Context, id int)) *UserStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserStore_GetUser_Call) Return(user core.User, err error) *UserStore_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *UserStore) GetUserByExternalID(ctx context.Context, externalID int) (core.ExternalUser, error) {
	ret := _m.Called(ctx, externalID)

	var r0 core.ExternalUser
	if rf, ok := ret.Get(0).(func(context.Context, int) core.ExternalUser); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Get(0).(core.ExternalUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_GetUserByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByExternalID'
type UserStore_GetUserByExternalID_Call struct {
	*mock.Call
}

// GetUserByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID int
func (_e *UserStore_Expecter) GetUserByExternalID(ctx interface{}, externalID interface{}) *UserStore_GetUserByExternalID_Call {
	return &UserStore_GetUserByExternalID_Call{Call: _e.mock.On("GetUserByExternalID", ctx, externalID)}
}

func (_c *UserStore_GetUserByExternalID_Call) Run(run func(ctx context.Context, externalID int)) *UserStore_GetUserByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserStore_GetUserByExternalID_Call) Return(data core.ExternalUser, err error) *UserStore_GetUserByExternalID_Call {
	_c.Call.Return(data, err)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserStore) GetUserByID(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserStore_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *UserStore_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserStore_GetUserByID_Call {
	return &UserStore_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserStore_GetUserByID_Call) Run(run func(ctx context.Context, id int)) *UserStore_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserStore_GetUserByID_Call) Return(data core.User, err error) *UserStore_GetUserByID_Call {
	_c.Call.Return(data, err)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserStore) GetUserByUsername(ctx context.Context, username string) (core.User, error) {
	ret := _m.Called(ctx, username)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, string) core.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserStore_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *UserStore_GetUserByUsername_Call {
	return &UserStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *UserStore_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *UserStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserStore_GetUserByUsername_Call) Return(data core.User, err error) *UserStore_GetUserByUsername_Call {
	_c.Call.Return(data, err)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, update
func (_m *UserStore) UpdateUser(ctx context.Context, id int, update core.UpdateUser) (core.User, error) {
	ret := _m.Called(ctx, id, update)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateUser) core.User); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateUser) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserStore_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - update core.UpdateUser
func (_e *UserStore_Expecter) UpdateUser(ctx interface{}, id interface{}, update interface{}) *UserStore_UpdateUser_Call {
	return &UserStore_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, update)}
}

func (_c *UserStore_UpdateUser_Call) Run(run func(ctx context.Context, id int, update core.UpdateUser)) *UserStore_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateUser))
	})
	return _c
}

func (_c *UserStore_UpdateUser_Call) Return(updatedUser core.User, err error) *UserStore_UpdateUser_Call {
	_c.Call.Return(updatedUser, err)
	return _c
}

type mockConstructorTestingTNewUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStore(t mockConstructorTestingTNewUserStore) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
