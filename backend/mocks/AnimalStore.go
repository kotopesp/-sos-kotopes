// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// AnimalStore is an autogenerated mock type for the AnimalStore type
type AnimalStore struct {
	mock.Mock
}

type AnimalStore_Expecter struct {
	mock *mock.Mock
}

func (_m *AnimalStore) EXPECT() *AnimalStore_Expecter {
	return &AnimalStore_Expecter{mock: &_m.Mock}
}

// CreateAnimal provides a mock function with given fields: ctx, animal
func (_m *AnimalStore) CreateAnimal(ctx context.Context, animal core.Animal) (core.Animal, error) {
	ret := _m.Called(ctx, animal)

	var r0 core.Animal
	if rf, ok := ret.Get(0).(func(context.Context, core.Animal) core.Animal); ok {
		r0 = rf(ctx, animal)
	} else {
		r0 = ret.Get(0).(core.Animal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Animal) error); ok {
		r1 = rf(ctx, animal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnimalStore_CreateAnimal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAnimal'
type AnimalStore_CreateAnimal_Call struct {
	*mock.Call
}

// CreateAnimal is a helper method to define mock.On call
//   - ctx context.Context
//   - animal core.Animal
func (_e *AnimalStore_Expecter) CreateAnimal(ctx interface{}, animal interface{}) *AnimalStore_CreateAnimal_Call {
	return &AnimalStore_CreateAnimal_Call{Call: _e.mock.On("CreateAnimal", ctx, animal)}
}

func (_c *AnimalStore_CreateAnimal_Call) Run(run func(ctx context.Context, animal core.Animal)) *AnimalStore_CreateAnimal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Animal))
	})
	return _c
}

func (_c *AnimalStore_CreateAnimal_Call) Return(_a0 core.Animal, _a1 error) *AnimalStore_CreateAnimal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAnimalByID provides a mock function with given fields: ctx, id
func (_m *AnimalStore) GetAnimalByID(ctx context.Context, id int) (core.Animal, error) {
	ret := _m.Called(ctx, id)

	var r0 core.Animal
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Animal); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.Animal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnimalStore_GetAnimalByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnimalByID'
type AnimalStore_GetAnimalByID_Call struct {
	*mock.Call
}

// GetAnimalByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *AnimalStore_Expecter) GetAnimalByID(ctx interface{}, id interface{}) *AnimalStore_GetAnimalByID_Call {
	return &AnimalStore_GetAnimalByID_Call{Call: _e.mock.On("GetAnimalByID", ctx, id)}
}

func (_c *AnimalStore_GetAnimalByID_Call) Run(run func(ctx context.Context, id int)) *AnimalStore_GetAnimalByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *AnimalStore_GetAnimalByID_Call) Return(_a0 core.Animal, _a1 error) *AnimalStore_GetAnimalByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAnimal provides a mock function with given fields: ctx, animal
func (_m *AnimalStore) UpdateAnimal(ctx context.Context, animal core.Animal) (core.Animal, error) {
	ret := _m.Called(ctx, animal)

	var r0 core.Animal
	if rf, ok := ret.Get(0).(func(context.Context, core.Animal) core.Animal); ok {
		r0 = rf(ctx, animal)
	} else {
		r0 = ret.Get(0).(core.Animal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Animal) error); ok {
		r1 = rf(ctx, animal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnimalStore_UpdateAnimal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnimal'
type AnimalStore_UpdateAnimal_Call struct {
	*mock.Call
}

// UpdateAnimal is a helper method to define mock.On call
//   - ctx context.Context
//   - animal core.Animal
func (_e *AnimalStore_Expecter) UpdateAnimal(ctx interface{}, animal interface{}) *AnimalStore_UpdateAnimal_Call {
	return &AnimalStore_UpdateAnimal_Call{Call: _e.mock.On("UpdateAnimal", ctx, animal)}
}

func (_c *AnimalStore_UpdateAnimal_Call) Run(run func(ctx context.Context, animal core.Animal)) *AnimalStore_UpdateAnimal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Animal))
	})
	return _c
}

func (_c *AnimalStore_UpdateAnimal_Call) Return(_a0 core.Animal, _a1 error) *AnimalStore_UpdateAnimal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAnimalStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAnimalStore creates a new instance of AnimalStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAnimalStore(t mockConstructorTestingTNewAnimalStore) *AnimalStore {
	mock := &AnimalStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
