// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserService) GetUser(ctx context.Context, id int) (core.User, error) {
	ret := _m.Called(ctx, id)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, int) core.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *UserService_Expecter) GetUser(ctx interface{}, id interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, id int)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(user core.User, err error) *UserService_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, update
func (_m *UserService) UpdateUser(ctx context.Context, id int, update core.UpdateUser) (core.User, error) {
	ret := _m.Called(ctx, id, update)

	var r0 core.User
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateUser) core.User); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Get(0).(core.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateUser) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - update core.UpdateUser
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, id interface{}, update interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, update)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, id int, update core.UpdateUser)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateUser))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(updatedUser core.User, err error) *UserService_UpdateUser_Call {
	_c.Call.Return(updatedUser, err)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
