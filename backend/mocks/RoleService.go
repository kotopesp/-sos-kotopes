// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// RoleService is an autogenerated mock type for the RoleService type
type RoleService struct {
	mock.Mock
}

type RoleService_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleService) EXPECT() *RoleService_Expecter {
	return &RoleService_Expecter{mock: &_m.Mock}
}

// DeleteUserRole provides a mock function with given fields: ctx, id, role
func (_m *RoleService) DeleteUserRole(ctx context.Context, id int, role string) error {
	ret := _m.Called(ctx, id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleService_DeleteUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRole'
type RoleService_DeleteUserRole_Call struct {
	*mock.Call
}

// DeleteUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - role string
func (_e *RoleService_Expecter) DeleteUserRole(ctx interface{}, id interface{}, role interface{}) *RoleService_DeleteUserRole_Call {
	return &RoleService_DeleteUserRole_Call{Call: _e.mock.On("DeleteUserRole", ctx, id, role)}
}

func (_c *RoleService_DeleteUserRole_Call) Run(run func(ctx context.Context, id int, role string)) *RoleService_DeleteUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *RoleService_DeleteUserRole_Call) Return(err error) *RoleService_DeleteUserRole_Call {
	_c.Call.Return(err)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, id
func (_m *RoleService) GetUserRoles(ctx context.Context, id int) ([]core.RoleDetails, error) {
	ret := _m.Called(ctx, id)

	var r0 []core.RoleDetails
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.RoleDetails); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.RoleDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleService_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type RoleService_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *RoleService_Expecter) GetUserRoles(ctx interface{}, id interface{}) *RoleService_GetUserRoles_Call {
	return &RoleService_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, id)}
}

func (_c *RoleService_GetUserRoles_Call) Run(run func(ctx context.Context, id int)) *RoleService_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *RoleService_GetUserRoles_Call) Return(roles []core.RoleDetails, err error) *RoleService_GetUserRoles_Call {
	_c.Call.Return(roles, err)
	return _c
}

// GiveRoleToUser provides a mock function with given fields: ctx, id, role
func (_m *RoleService) GiveRoleToUser(ctx context.Context, id int, role core.GivenRole) (core.RoleDetails, error) {
	ret := _m.Called(ctx, id, role)

	var r0 core.RoleDetails
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GivenRole) core.RoleDetails); ok {
		r0 = rf(ctx, id, role)
	} else {
		r0 = ret.Get(0).(core.RoleDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, core.GivenRole) error); ok {
		r1 = rf(ctx, id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleService_GiveRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GiveRoleToUser'
type RoleService_GiveRoleToUser_Call struct {
	*mock.Call
}

// GiveRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - role core.GivenRole
func (_e *RoleService_Expecter) GiveRoleToUser(ctx interface{}, id interface{}, role interface{}) *RoleService_GiveRoleToUser_Call {
	return &RoleService_GiveRoleToUser_Call{Call: _e.mock.On("GiveRoleToUser", ctx, id, role)}
}

func (_c *RoleService_GiveRoleToUser_Call) Run(run func(ctx context.Context, id int, role core.GivenRole)) *RoleService_GiveRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GivenRole))
	})
	return _c
}

func (_c *RoleService_GiveRoleToUser_Call) Return(addedRole core.RoleDetails, err error) *RoleService_GiveRoleToUser_Call {
	_c.Call.Return(addedRole, err)
	return _c
}

// UpdateUserRole provides a mock function with given fields: ctx, id, role
func (_m *RoleService) UpdateUserRole(ctx context.Context, id int, role core.UpdateRole) (core.RoleDetails, error) {
	ret := _m.Called(ctx, id, role)

	var r0 core.RoleDetails
	if rf, ok := ret.Get(0).(func(context.Context, int, core.UpdateRole) core.RoleDetails); ok {
		r0 = rf(ctx, id, role)
	} else {
		r0 = ret.Get(0).(core.RoleDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, core.UpdateRole) error); ok {
		r1 = rf(ctx, id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleService_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type RoleService_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - role core.UpdateRole
func (_e *RoleService_Expecter) UpdateUserRole(ctx interface{}, id interface{}, role interface{}) *RoleService_UpdateUserRole_Call {
	return &RoleService_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", ctx, id, role)}
}

func (_c *RoleService_UpdateUserRole_Call) Run(run func(ctx context.Context, id int, role core.UpdateRole)) *RoleService_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.UpdateRole))
	})
	return _c
}

func (_c *RoleService_UpdateUserRole_Call) Return(updatedRole core.RoleDetails, err error) *RoleService_UpdateUserRole_Call {
	_c.Call.Return(updatedRole, err)
	return _c
}

type mockConstructorTestingTNewRoleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleService creates a new instance of RoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleService(t mockConstructorTestingTNewRoleService) *RoleService {
	mock := &RoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
