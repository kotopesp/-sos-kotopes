// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// CommentStore is an autogenerated mock type for the CommentStore type
type CommentStore struct {
	mock.Mock
}

type CommentStore_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentStore) EXPECT() *CommentStore_Expecter {
	return &CommentStore_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *CommentStore) CreateComment(ctx context.Context, comment core.Comment) (core.Comment, error) {
	ret := _m.Called(ctx, comment)

	var r0 core.Comment
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) core.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStore_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type CommentStore_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment core.Comment
func (_e *CommentStore_Expecter) CreateComment(ctx interface{}, comment interface{}) *CommentStore_CreateComment_Call {
	return &CommentStore_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *CommentStore_CreateComment_Call) Run(run func(ctx context.Context, comment core.Comment)) *CommentStore_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Comment))
	})
	return _c
}

func (_c *CommentStore_CreateComment_Call) Return(data core.Comment, err error) *CommentStore_CreateComment_Call {
	_c.Call.Return(data, err)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, comments
func (_m *CommentStore) DeleteComment(ctx context.Context, comments core.Comment) error {
	ret := _m.Called(ctx, comments)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) error); ok {
		r0 = rf(ctx, comments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentStore_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type CommentStore_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comments core.Comment
func (_e *CommentStore_Expecter) DeleteComment(ctx interface{}, comments interface{}) *CommentStore_DeleteComment_Call {
	return &CommentStore_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, comments)}
}

func (_c *CommentStore_DeleteComment_Call) Run(run func(ctx context.Context, comments core.Comment)) *CommentStore_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Comment))
	})
	return _c
}

func (_c *CommentStore_DeleteComment_Call) Return(_a0 error) *CommentStore_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllComments provides a mock function with given fields: ctx, params
func (_m *CommentStore) GetAllComments(ctx context.Context, params core.GetAllCommentsParams) ([]core.Comment, int, error) {
	ret := _m.Called(ctx, params)

	var r0 []core.Comment
	if rf, ok := ret.Get(0).(func(context.Context, core.GetAllCommentsParams) []core.Comment); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Comment)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, core.GetAllCommentsParams) int); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, core.GetAllCommentsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CommentStore_GetAllComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComments'
type CommentStore_GetAllComments_Call struct {
	*mock.Call
}

// GetAllComments is a helper method to define mock.On call
//   - ctx context.Context
//   - params core.GetAllCommentsParams
func (_e *CommentStore_Expecter) GetAllComments(ctx interface{}, params interface{}) *CommentStore_GetAllComments_Call {
	return &CommentStore_GetAllComments_Call{Call: _e.mock.On("GetAllComments", ctx, params)}
}

func (_c *CommentStore_GetAllComments_Call) Run(run func(ctx context.Context, params core.GetAllCommentsParams)) *CommentStore_GetAllComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.GetAllCommentsParams))
	})
	return _c
}

func (_c *CommentStore_GetAllComments_Call) Return(data []core.Comment, total int, err error) *CommentStore_GetAllComments_Call {
	_c.Call.Return(data, total, err)
	return _c
}

// GetCommentByID provides a mock function with given fields: ctx, commentID
func (_m *CommentStore) GetCommentByID(ctx context.Context, commentID int) (core.Comment, error) {
	ret := _m.Called(ctx, commentID)

	var r0 core.Comment
	if rf, ok := ret.Get(0).(func(context.Context, int) core.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStore_GetCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentByID'
type CommentStore_GetCommentByID_Call struct {
	*mock.Call
}

// GetCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID int
func (_e *CommentStore_Expecter) GetCommentByID(ctx interface{}, commentID interface{}) *CommentStore_GetCommentByID_Call {
	return &CommentStore_GetCommentByID_Call{Call: _e.mock.On("GetCommentByID", ctx, commentID)}
}

func (_c *CommentStore_GetCommentByID_Call) Run(run func(ctx context.Context, commentID int)) *CommentStore_GetCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CommentStore_GetCommentByID_Call) Return(data core.Comment, err error) *CommentStore_GetCommentByID_Call {
	_c.Call.Return(data, err)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, comments
func (_m *CommentStore) UpdateComment(ctx context.Context, comments core.Comment) (core.Comment, error) {
	ret := _m.Called(ctx, comments)

	var r0 core.Comment
	if rf, ok := ret.Get(0).(func(context.Context, core.Comment) core.Comment); ok {
		r0 = rf(ctx, comments)
	} else {
		r0 = ret.Get(0).(core.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Comment) error); ok {
		r1 = rf(ctx, comments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentStore_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type CommentStore_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comments core.Comment
func (_e *CommentStore_Expecter) UpdateComment(ctx interface{}, comments interface{}) *CommentStore_UpdateComment_Call {
	return &CommentStore_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, comments)}
}

func (_c *CommentStore_UpdateComment_Call) Run(run func(ctx context.Context, comments core.Comment)) *CommentStore_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Comment))
	})
	return _c
}

func (_c *CommentStore_UpdateComment_Call) Return(data core.Comment, err error) *CommentStore_UpdateComment_Call {
	_c.Call.Return(data, err)
	return _c
}

type mockConstructorTestingTNewCommentStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentStore creates a new instance of CommentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentStore(t mockConstructorTestingTNewCommentStore) *CommentStore {
	mock := &CommentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
