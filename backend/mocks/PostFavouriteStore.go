// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// PostFavouriteStore is an autogenerated mock type for the PostFavouriteStore type
type PostFavouriteStore struct {
	mock.Mock
}

type PostFavouriteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *PostFavouriteStore) EXPECT() *PostFavouriteStore_Expecter {
	return &PostFavouriteStore_Expecter{mock: &_m.Mock}
}

// AddToFavourites provides a mock function with given fields: ctx, postFavourite
func (_m *PostFavouriteStore) AddToFavourites(ctx context.Context, postFavourite core.PostFavourite) (core.Post, error) {
	ret := _m.Called(ctx, postFavourite)

	var r0 core.Post
	if rf, ok := ret.Get(0).(func(context.Context, core.PostFavourite) core.Post); ok {
		r0 = rf(ctx, postFavourite)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.PostFavourite) error); ok {
		r1 = rf(ctx, postFavourite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostFavouriteStore_AddToFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToFavourites'
type PostFavouriteStore_AddToFavourites_Call struct {
	*mock.Call
}

// AddToFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - postFavourite core.PostFavourite
func (_e *PostFavouriteStore_Expecter) AddToFavourites(ctx interface{}, postFavourite interface{}) *PostFavouriteStore_AddToFavourites_Call {
	return &PostFavouriteStore_AddToFavourites_Call{Call: _e.mock.On("AddToFavourites", ctx, postFavourite)}
}

func (_c *PostFavouriteStore_AddToFavourites_Call) Run(run func(ctx context.Context, postFavourite core.PostFavourite)) *PostFavouriteStore_AddToFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PostFavourite))
	})
	return _c
}

func (_c *PostFavouriteStore_AddToFavourites_Call) Return(_a0 core.Post, _a1 error) *PostFavouriteStore_AddToFavourites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteFromFavourites provides a mock function with given fields: ctx, postID, userID
func (_m *PostFavouriteStore) DeleteFromFavourites(ctx context.Context, postID int, userID int) error {
	ret := _m.Called(ctx, postID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostFavouriteStore_DeleteFromFavourites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFromFavourites'
type PostFavouriteStore_DeleteFromFavourites_Call struct {
	*mock.Call
}

// DeleteFromFavourites is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *PostFavouriteStore_Expecter) DeleteFromFavourites(ctx interface{}, postID interface{}, userID interface{}) *PostFavouriteStore_DeleteFromFavourites_Call {
	return &PostFavouriteStore_DeleteFromFavourites_Call{Call: _e.mock.On("DeleteFromFavourites", ctx, postID, userID)}
}

func (_c *PostFavouriteStore_DeleteFromFavourites_Call) Run(run func(ctx context.Context, postID int, userID int)) *PostFavouriteStore_DeleteFromFavourites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *PostFavouriteStore_DeleteFromFavourites_Call) Return(_a0 error) *PostFavouriteStore_DeleteFromFavourites_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFavouritePosts provides a mock function with given fields: ctx, userID, params
func (_m *PostFavouriteStore) GetFavouritePosts(ctx context.Context, userID int, params core.GetAllPostsParams) ([]core.Post, int, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 []core.Post
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) []core.Post); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, userID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostFavouriteStore_GetFavouritePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFavouritePosts'
type PostFavouriteStore_GetFavouritePosts_Call struct {
	*mock.Call
}

// GetFavouritePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetAllPostsParams
func (_e *PostFavouriteStore_Expecter) GetFavouritePosts(ctx interface{}, userID interface{}, params interface{}) *PostFavouriteStore_GetFavouritePosts_Call {
	return &PostFavouriteStore_GetFavouritePosts_Call{Call: _e.mock.On("GetFavouritePosts", ctx, userID, params)}
}

func (_c *PostFavouriteStore_GetFavouritePosts_Call) Run(run func(ctx context.Context, userID int, params core.GetAllPostsParams)) *PostFavouriteStore_GetFavouritePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *PostFavouriteStore_GetFavouritePosts_Call) Return(_a0 []core.Post, _a1 int, _a2 error) *PostFavouriteStore_GetFavouritePosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// GetPostFavouriteByPostAndUserID provides a mock function with given fields: ctx, postID, userID
func (_m *PostFavouriteStore) GetPostFavouriteByPostAndUserID(ctx context.Context, postID int, userID int) (core.PostFavourite, error) {
	ret := _m.Called(ctx, postID, userID)

	var r0 core.PostFavourite
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.PostFavourite); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Get(0).(core.PostFavourite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostFavouriteByPostAndUserID'
type PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call struct {
	*mock.Call
}

// GetPostFavouriteByPostAndUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *PostFavouriteStore_Expecter) GetPostFavouriteByPostAndUserID(ctx interface{}, postID interface{}, userID interface{}) *PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	return &PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call{Call: _e.mock.On("GetPostFavouriteByPostAndUserID", ctx, postID, userID)}
}

func (_c *PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call) Run(run func(ctx context.Context, postID int, userID int)) *PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call) Return(_a0 core.PostFavourite, _a1 error) *PostFavouriteStore_GetPostFavouriteByPostAndUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPostFavouriteStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostFavouriteStore creates a new instance of PostFavouriteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostFavouriteStore(t mockConstructorTestingTNewPostFavouriteStore) *PostFavouriteStore {
	mock := &PostFavouriteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
