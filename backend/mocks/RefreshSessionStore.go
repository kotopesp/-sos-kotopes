// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// RefreshSessionStore is an autogenerated mock type for the RefreshSessionStore type
type RefreshSessionStore struct {
	mock.Mock
}

type RefreshSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *RefreshSessionStore) EXPECT() *RefreshSessionStore_Expecter {
	return &RefreshSessionStore_Expecter{mock: &_m.Mock}
}

// CountSessionsAndDelete provides a mock function with given fields: ctx, userID
func (_m *RefreshSessionStore) CountSessionsAndDelete(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSessionStore_CountSessionsAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSessionsAndDelete'
type RefreshSessionStore_CountSessionsAndDelete_Call struct {
	*mock.Call
}

// CountSessionsAndDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *RefreshSessionStore_Expecter) CountSessionsAndDelete(ctx interface{}, userID interface{}) *RefreshSessionStore_CountSessionsAndDelete_Call {
	return &RefreshSessionStore_CountSessionsAndDelete_Call{Call: _e.mock.On("CountSessionsAndDelete", ctx, userID)}
}

func (_c *RefreshSessionStore_CountSessionsAndDelete_Call) Run(run func(ctx context.Context, userID int)) *RefreshSessionStore_CountSessionsAndDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *RefreshSessionStore_CountSessionsAndDelete_Call) Return(_a0 error) *RefreshSessionStore_CountSessionsAndDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetRefreshSessionByToken provides a mock function with given fields: ctx, token
func (_m *RefreshSessionStore) GetRefreshSessionByToken(ctx context.Context, token string) (core.RefreshSession, error) {
	ret := _m.Called(ctx, token)

	var r0 core.RefreshSession
	if rf, ok := ret.Get(0).(func(context.Context, string) core.RefreshSession); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(core.RefreshSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshSessionStore_GetRefreshSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshSessionByToken'
type RefreshSessionStore_GetRefreshSessionByToken_Call struct {
	*mock.Call
}

// GetRefreshSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *RefreshSessionStore_Expecter) GetRefreshSessionByToken(ctx interface{}, token interface{}) *RefreshSessionStore_GetRefreshSessionByToken_Call {
	return &RefreshSessionStore_GetRefreshSessionByToken_Call{Call: _e.mock.On("GetRefreshSessionByToken", ctx, token)}
}

func (_c *RefreshSessionStore_GetRefreshSessionByToken_Call) Run(run func(ctx context.Context, token string)) *RefreshSessionStore_GetRefreshSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RefreshSessionStore_GetRefreshSessionByToken_Call) Return(data core.RefreshSession, err error) *RefreshSessionStore_GetRefreshSessionByToken_Call {
	_c.Call.Return(data, err)
	return _c
}

// UpdateRefreshSession provides a mock function with given fields: ctx, param, refreshSession
func (_m *RefreshSessionStore) UpdateRefreshSession(ctx context.Context, param core.UpdateRefreshSessionParam, refreshSession core.RefreshSession) error {
	ret := _m.Called(ctx, param, refreshSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateRefreshSessionParam, core.RefreshSession) error); ok {
		r0 = rf(ctx, param, refreshSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSessionStore_UpdateRefreshSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefreshSession'
type RefreshSessionStore_UpdateRefreshSession_Call struct {
	*mock.Call
}

// UpdateRefreshSession is a helper method to define mock.On call
//   - ctx context.Context
//   - param core.UpdateRefreshSessionParam
//   - refreshSession core.RefreshSession
func (_e *RefreshSessionStore_Expecter) UpdateRefreshSession(ctx interface{}, param interface{}, refreshSession interface{}) *RefreshSessionStore_UpdateRefreshSession_Call {
	return &RefreshSessionStore_UpdateRefreshSession_Call{Call: _e.mock.On("UpdateRefreshSession", ctx, param, refreshSession)}
}

func (_c *RefreshSessionStore_UpdateRefreshSession_Call) Run(run func(ctx context.Context, param core.UpdateRefreshSessionParam, refreshSession core.RefreshSession)) *RefreshSessionStore_UpdateRefreshSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateRefreshSessionParam), args[2].(core.RefreshSession))
	})
	return _c
}

func (_c *RefreshSessionStore_UpdateRefreshSession_Call) Return(_a0 error) *RefreshSessionStore_UpdateRefreshSession_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRefreshSessionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshSessionStore creates a new instance of RefreshSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshSessionStore(t mockConstructorTestingTNewRefreshSessionStore) *RefreshSessionStore {
	mock := &RefreshSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
