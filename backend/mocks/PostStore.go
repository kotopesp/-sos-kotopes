// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// PostStore is an autogenerated mock type for the PostStore type
type PostStore struct {
	mock.Mock
}

type PostStore_Expecter struct {
	mock *mock.Mock
}

func (_m *PostStore) EXPECT() *PostStore_Expecter {
	return &PostStore_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *PostStore) CreatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	var r0 core.Post
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStore_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type PostStore_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.Post
func (_e *PostStore_Expecter) CreatePost(ctx interface{}, post interface{}) *PostStore_CreatePost_Call {
	return &PostStore_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *PostStore_CreatePost_Call) Run(run func(ctx context.Context, post core.Post)) *PostStore_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Post))
	})
	return _c
}

func (_c *PostStore_CreatePost_Call) Return(_a0 core.Post, _a1 error) *PostStore_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *PostStore) DeletePost(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostStore_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type PostStore_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *PostStore_Expecter) DeletePost(ctx interface{}, id interface{}) *PostStore_DeletePost_Call {
	return &PostStore_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *PostStore_DeletePost_Call) Run(run func(ctx context.Context, id int)) *PostStore_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PostStore_DeletePost_Call) Return(_a0 error) *PostStore_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllPosts provides a mock function with given fields: ctx, userID, params
func (_m *PostStore) GetAllPosts(ctx context.Context, userID int, params core.GetAllPostsParams) ([]core.Post, int, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 []core.Post
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetAllPostsParams) []core.Post); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetAllPostsParams) int); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetAllPostsParams) error); ok {
		r2 = rf(ctx, userID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostStore_GetAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPosts'
type PostStore_GetAllPosts_Call struct {
	*mock.Call
}

// GetAllPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetAllPostsParams
func (_e *PostStore_Expecter) GetAllPosts(ctx interface{}, userID interface{}, params interface{}) *PostStore_GetAllPosts_Call {
	return &PostStore_GetAllPosts_Call{Call: _e.mock.On("GetAllPosts", ctx, userID, params)}
}

func (_c *PostStore_GetAllPosts_Call) Run(run func(ctx context.Context, userID int, params core.GetAllPostsParams)) *PostStore_GetAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetAllPostsParams))
	})
	return _c
}

func (_c *PostStore_GetAllPosts_Call) Return(_a0 []core.Post, _a1 int, _a2 error) *PostStore_GetAllPosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, postID, userID
func (_m *PostStore) GetPostByID(ctx context.Context, postID int, userID int) (core.Post, error) {
	ret := _m.Called(ctx, postID, userID)

	var r0 core.Post
	if rf, ok := ret.Get(0).(func(context.Context, int, int) core.Post); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStore_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type PostStore_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - userID int
func (_e *PostStore_Expecter) GetPostByID(ctx interface{}, postID interface{}, userID interface{}) *PostStore_GetPostByID_Call {
	return &PostStore_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, postID, userID)}
}

func (_c *PostStore_GetPostByID_Call) Run(run func(ctx context.Context, postID int, userID int)) *PostStore_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *PostStore_GetPostByID_Call) Return(_a0 core.Post, _a1 error) *PostStore_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserPosts provides a mock function with given fields: ctx, id
func (_m *PostStore) GetUserPosts(ctx context.Context, id int) ([]core.Post, int, error) {
	ret := _m.Called(ctx, id)

	var r0 []core.Post
	if rf, ok := ret.Get(0).(func(context.Context, int) []core.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Post)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostStore_GetUserPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPosts'
type PostStore_GetUserPosts_Call struct {
	*mock.Call
}

// GetUserPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *PostStore_Expecter) GetUserPosts(ctx interface{}, id interface{}) *PostStore_GetUserPosts_Call {
	return &PostStore_GetUserPosts_Call{Call: _e.mock.On("GetUserPosts", ctx, id)}
}

func (_c *PostStore_GetUserPosts_Call) Run(run func(ctx context.Context, id int)) *PostStore_GetUserPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PostStore_GetUserPosts_Call) Return(posts []core.Post, count int, err error) *PostStore_GetUserPosts_Call {
	_c.Call.Return(posts, count, err)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, post
func (_m *PostStore) UpdatePost(ctx context.Context, post core.Post) (core.Post, error) {
	ret := _m.Called(ctx, post)

	var r0 core.Post
	if rf, ok := ret.Get(0).(func(context.Context, core.Post) core.Post); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(core.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStore_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type PostStore_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post core.Post
func (_e *PostStore_Expecter) UpdatePost(ctx interface{}, post interface{}) *PostStore_UpdatePost_Call {
	return &PostStore_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, post)}
}

func (_c *PostStore_UpdatePost_Call) Run(run func(ctx context.Context, post core.Post)) *PostStore_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Post))
	})
	return _c
}

func (_c *PostStore_UpdatePost_Call) Return(_a0 core.Post, _a1 error) *PostStore_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPostStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostStore creates a new instance of PostStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostStore(t mockConstructorTestingTNewPostStore) *PostStore {
	mock := &PostStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
