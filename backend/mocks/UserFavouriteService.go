// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/kotopesp/sos-kotopes/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// UserFavouriteService is an autogenerated mock type for the UserFavouriteService type
type UserFavouriteService struct {
	mock.Mock
}

type UserFavouriteService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserFavouriteService) EXPECT() *UserFavouriteService_Expecter {
	return &UserFavouriteService_Expecter{mock: &_m.Mock}
}

// AddUserToFavourite provides a mock function with given fields: ctx, personID, userID
func (_m *UserFavouriteService) AddUserToFavourite(ctx context.Context, personID int, userID int) error {
	ret := _m.Called(ctx, personID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, personID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserFavouriteService_AddUserToFavourite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToFavourite'
type UserFavouriteService_AddUserToFavourite_Call struct {
	*mock.Call
}

// AddUserToFavourite is a helper method to define mock.On call
//   - ctx context.Context
//   - personID int
//   - userID int
func (_e *UserFavouriteService_Expecter) AddUserToFavourite(ctx interface{}, personID interface{}, userID interface{}) *UserFavouriteService_AddUserToFavourite_Call {
	return &UserFavouriteService_AddUserToFavourite_Call{Call: _e.mock.On("AddUserToFavourite", ctx, personID, userID)}
}

func (_c *UserFavouriteService_AddUserToFavourite_Call) Run(run func(ctx context.Context, personID int, userID int)) *UserFavouriteService_AddUserToFavourite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UserFavouriteService_AddUserToFavourite_Call) Return(err error) *UserFavouriteService_AddUserToFavourite_Call {
	_c.Call.Return(err)
	return _c
}

// DeleteUserFromFavourite provides a mock function with given fields: ctx, personID, userID
func (_m *UserFavouriteService) DeleteUserFromFavourite(ctx context.Context, personID int, userID int) error {
	ret := _m.Called(ctx, personID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, personID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserFavouriteService_DeleteUserFromFavourite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFromFavourite'
type UserFavouriteService_DeleteUserFromFavourite_Call struct {
	*mock.Call
}

// DeleteUserFromFavourite is a helper method to define mock.On call
//   - ctx context.Context
//   - personID int
//   - userID int
func (_e *UserFavouriteService_Expecter) DeleteUserFromFavourite(ctx interface{}, personID interface{}, userID interface{}) *UserFavouriteService_DeleteUserFromFavourite_Call {
	return &UserFavouriteService_DeleteUserFromFavourite_Call{Call: _e.mock.On("DeleteUserFromFavourite", ctx, personID, userID)}
}

func (_c *UserFavouriteService_DeleteUserFromFavourite_Call) Run(run func(ctx context.Context, personID int, userID int)) *UserFavouriteService_DeleteUserFromFavourite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UserFavouriteService_DeleteUserFromFavourite_Call) Return(err error) *UserFavouriteService_DeleteUserFromFavourite_Call {
	_c.Call.Return(err)
	return _c
}

// GetFavouriteUsers provides a mock function with given fields: ctx, userID, params
func (_m *UserFavouriteService) GetFavouriteUsers(ctx context.Context, userID int, params core.GetFavourites) ([]core.User, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 []core.User
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetFavourites) []core.User); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetFavourites) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFavouriteService_GetFavouriteUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFavouriteUsers'
type UserFavouriteService_GetFavouriteUsers_Call struct {
	*mock.Call
}

// GetFavouriteUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.GetFavourites
func (_e *UserFavouriteService_Expecter) GetFavouriteUsers(ctx interface{}, userID interface{}, params interface{}) *UserFavouriteService_GetFavouriteUsers_Call {
	return &UserFavouriteService_GetFavouriteUsers_Call{Call: _e.mock.On("GetFavouriteUsers", ctx, userID, params)}
}

func (_c *UserFavouriteService_GetFavouriteUsers_Call) Run(run func(ctx context.Context, userID int, params core.GetFavourites)) *UserFavouriteService_GetFavouriteUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetFavourites))
	})
	return _c
}

func (_c *UserFavouriteService_GetFavouriteUsers_Call) Return(favouriteUsers []core.User, err error) *UserFavouriteService_GetFavouriteUsers_Call {
	_c.Call.Return(favouriteUsers, err)
	return _c
}

type mockConstructorTestingTNewUserFavouriteService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserFavouriteService creates a new instance of UserFavouriteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserFavouriteService(t mockConstructorTestingTNewUserFavouriteService) *UserFavouriteService {
	mock := &UserFavouriteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
